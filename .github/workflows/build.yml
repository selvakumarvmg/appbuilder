name: Build Windows Installer

on:
  push:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: C:\Users\runneradmin\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PySide6 pillow tzdata

    - name: Show source directory structure
      shell: powershell
      run: |
        Write-Output "========= Source Directory Structure ========="
        Get-ChildItem -Recurse | Format-List

    - name: Verify required files exist
      shell: powershell
      run: |
        $RequiredFiles = @(
          "app.py",
          "icons\premedia.ico",
          "icons\photoshop.png",
          "icons\folder.png",
          "terms.txt",
          "license.txt"
        )
        foreach ($file in $RequiredFiles) {
          if (-not (Test-Path $file)) {
            Write-Error "❌ Missing required file: $file"
            exit 1
          } else {
            Write-Output "✅ Found: $file"
          }
        }

    - name: Show contents of app.spec
      shell: powershell
      run: |
        Write-Output "========= Contents of app.spec ========="
        Get-Content app.spec

    - name: Build EXE with PyInstaller (with full log)
      shell: powershell
      run: |
        Set-Location $env:GITHUB_WORKSPACE
        Write-Output "========= Starting PyInstaller ========="
        $logPath = "pyinstaller.log"
        $psi = New-Object System.Diagnostics.ProcessStartInfo
        $psi.FileName = "pyinstaller"
        $psi.Arguments = "app.spec --clean --noconfirm --log-level DEBUG"
        $psi.RedirectStandardOutput = $true
        $psi.RedirectStandardError = $true
        $psi.UseShellExecute = $false
        $psi.CreateNoWindow = $true
        $process = New-Object System.Diagnostics.Process
        $process.StartInfo = $psi
        $process.Start() | Out-Null
        $stdout = $process.StandardOutput.ReadToEnd()
        $stderr = $process.StandardError.ReadToEnd()
        $process.WaitForExit()
        $stdout | Set-Content $logPath
        $stderr | Add-Content $logPath
        Write-Output "========= Contents of pyinstaller.log ========="
        Get-Content $logPath
        if ($process.ExitCode -ne 0) {
          Write-Error "❌ PyInstaller failed with exit code $($process.ExitCode)"
          exit $process.ExitCode
        } else {
          Write-Output "✅ PyInstaller build succeeded"
        }

    - name: Upload PyInstaller log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pyinstaller-log
        path: pyinstaller.log

    - name: Check dist/ directory contents
      shell: powershell
      run: |
        Write-Output "========= Contents of dist directory ========="
        Get-ChildItem dist -Recurse | Format-Table Name, Length, LastWriteTime -AutoSize
        $exePath = "dist\PremediaApp.exe"
        if (-not (Test-Path $exePath)) {
          Write-Error "❌ dist/PremediaApp.exe not found!"
          exit 1
        } else {
          Write-Output "✅ EXE file found: $exePath"
        }

    - name: Set up Inno Setup
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2

    - name: Build Installer with Inno Setup
      shell: powershell
      run: |
        Set-Location $env:GITHUB_WORKSPACE
        Write-Output "========= Running Inno Setup Compiler ========="
        iscc installer/installer.iss
        if ($LASTEXITCODE -ne 0) {
          Write-Error "❌ Inno Setup compilation failed"
          exit $LASTEXITCODE
        } else {
          Write-Output "✅ Inno Setup succeeded"
        }

    - name: Show Output folder contents
      shell: powershell
      run: |
        Write-Output "========= Contents of Output directory ========="
        Get-ChildItem Output

    - name: Upload Installer Artifact
      uses: actions/upload-artifact@v4
      with:
        name: PremediaApp-Installer
        path: Output/PremediaApp-Setup.exe
