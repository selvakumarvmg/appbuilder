name: Build PremediaApp (macOS & Windows)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-macos:
    name: üõ†Ô∏è Build macOS x86_64 App
    runs-on: macos-13

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9.13'
          architecture: 'x64'

      # Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # Clear pip cache
      - name: Clear pip cache
        run: pip cache purge
        shell: bash

      # Install dependencies
      - name: Install dependencies
        run: |
          echo "Starting dependency installation at $(date)"
          python -m pip install --upgrade pip
          pip install --upgrade wheel setuptools
          echo "Inspecting requirements.txt..."
          cat requirements.txt
          echo "Installing requirements..."
          pip install -r requirements.txt --no-cache-dir --force-reinstall --verbose > requirements_install.log 2>&1 || (echo "‚ùå Failed to install requirements" && cat requirements_install.log && exit 1)
          echo "Installing PySide6 and dependencies..."
          pip install PySide6==6.9.1 PySide6-Essentials==6.9.1 PySide6-Addons==6.9.1 shiboken6==6.9.1 --no-cache-dir --force-reinstall --verbose > pyside6_install.log 2>&1 || (echo "‚ùå Failed to install PySide6" && cat pyside6_install.log && exit 1)
          echo "Installing PyInstaller..."
          pip install pyinstaller==6.14.0 --no-cache-dir --force-reinstall --verbose > pyinstaller_install.log 2>&1 || (echo "‚ùå PyInstaller installation failed" && cat pyinstaller_install.log && exit 1)
          echo "Installing dmgbuild..."
          pip install dmgbuild --no-cache-dir --force-reinstall --verbose > dmgbuild_install.log 2>&1 || (echo "‚ùå dmgbuild installation failed" && cat dmgbuild_install.log && exit 1)
          pip list > installed_packages.txt
          python -m pip show pyinstaller || (echo "‚ùå PyInstaller not installed" && exit 1)
          python -m pip show PySide6 || (echo "‚ùå PySide6 not installed" && exit 1)
          echo "Checking PySide6 plugins..."
          python -c "import PySide6; import os; plugins_path = os.path.join(os.path.dirname(PySide6.__file__), 'Qt/plugins'); print(plugins_path)" > plugins_path.txt
          cat plugins_path.txt
          ls -ld "$(cat plugins_path.txt)/platforms" || (echo "‚ùå PySide6 platforms directory not found" && exit 1)
          ls -ld "$(cat plugins_path.txt)/imageformats" || (echo "‚ùå PySide6 imageformats directory not found" && exit 1)
          find / -name qcocoa.dylib 2>/dev/null > plugin_check.txt || echo "No qcocoa.dylib found" >> plugin_check.txt
          find / -name qicns.dylib 2>/dev/null >> plugin_check.txt || echo "No qicns.dylib found" >> plugin_check.txt
          cat plugin_check.txt
          echo "Dependency installation completed at $(date)"
        shell: bash

      # Upload install logs
      - name: Upload requirements install log
        uses: actions/upload-artifact@v4
        with:
          name: requirements-install-log-macos
          path: requirements_install.log
        if: always()

      - name: Upload PySide6 install log
        uses: actions/upload-artifact@v4
        with:
          name: pyside6-install-log-macos
          path: pyside6_install.log
        if: always()

      - name: Upload PyInstaller install log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-install-log-macos
          path: pyinstaller_install.log
        if: always()

      - name: Upload dmgbuild install log
        uses: actions/upload-artifact@v4
        with:
          name: dmgbuild-install-log-macos
          path: dmgbuild_install.log
        if: always()

      - name: Upload plugin check log
        uses: actions/upload-artifact@v4
        with:
          name: plugin-check-log-macos
          path: plugin_check.txt
        if: always()

      # Show installed packages
      - name: Show installed packages
        run: cat installed_packages.txt
        shell: bash

      # Verify required files
      - name: Verify required files
        run: |
          test -f app.py || (echo "‚ùå app.py missing" && exit 1)
          test -f login.py || (echo "‚ùå login.py missing" && exit 1)
          test -f icons/premedia.icns || (echo "‚ùå premedia.icns missing" && exit 1)
          test -f icons/photoshop.png || (echo "‚ùå photoshop.png missing" && exit 1)
          test -f icons/folder.png || (echo "‚ùå folder.png missing" && exit 1)
          test -f icons/premedia.png || (echo "‚ùå premedia.png missing" && exit 1)
          test -f icons/vmg-premedia-logo.png || (echo "‚ùå vmg-premedia-logo.png missing" && exit 1)
          test -f terms.txt || (echo "‚ùå terms.txt missing" && exit 1)
          test -f license.txt || (echo "‚ùå license.txt missing" && exit 1)
          test -f login.ui || (echo "‚ùå login.ui missing" && exit 1)
          test -f premediaapp.ui || (echo "‚ùå premediaapp.ui missing" && exit 1)
          test -f icons.qrc || (echo "‚ùå icons.qrc missing" && exit 1)
          test -f icons_rc.py || (echo "‚ùå icons_rc.py missing" && exit 1)
          test -f installer/dmg-settings.py || (echo "‚ùå dmg-settings.py missing" && exit 1)
          test -f installer-assets/dmg-background.bmp || (echo "‚ùå DMG background missing" && exit 1)
          test -f runtime-hook.py || (echo "‚ùå runtime-hook.py missing" && exit 1)
          test -f cache/cache.json || (echo "‚ùå cache.json missing" && exit 1)
        shell: bash

      # Build app with PyInstaller
      - name: Build App with PyInstaller
        run: |
          echo "Starting PyInstaller build at $(date)"
          echo "Checking syntax of app.py..."
          python -m py_compile app.py || (echo "‚ùå Syntax error in app.py" && exit 1)
          echo "Finding PySide6 plugins..."
          python -c "import PySide6; import os; plugins_path = os.path.join(os.path.dirname(PySide6.__file__), 'Qt/plugins'); print(plugins_path)" > plugins_path.txt
          export PYSIDE6_PLUGINS=$(cat plugins_path.txt)
          echo "PYSIDE6_PLUGINS=$PYSIDE6_PLUGINS"
          ls -ld "$PYSIDE6_PLUGINS/platforms" || (echo "‚ùå Platforms directory not found at $PYSIDE6_PLUGINS/platforms" && exit 1)
          ls -ld "$PYSIDE6_PLUGINS/imageformats" || (echo "‚ùå Imageformats directory not found at $PYSIDE6_PLUGINS/imageformats" && exit 1)
          echo "Running PyInstaller..."
          python -m PyInstaller --log-level=DEBUG --noconfirm --windowed --onedir \
            --name PremediaApp \
            --icon=icons/premedia.icns \
            --add-data "cache/cache.json:cache" \
            --add-data "icons/premedia.icns:icons" \
            --add-data "icons/photoshop.png:icons" \
            --add-data "icons/folder.png:icons" \
            --add-data "icons/premedia.png:icons" \
            --add-data "icons/vmg-premedia-logo.png:icons" \
            --add-data "terms.txt:." \
            --add-data "license.txt:." \
            --add-data "login.ui:." \
            --add-data "premediaapp.ui:." \
            --add-data "icons.qrc:." \
            --add-data "icons_rc.py:." \
            --add-data "login.py:." \
            --add-data "$PYSIDE6_PLUGINS/platforms:PySide6/Qt/plugins/platforms" \
            --add-data "$PYSIDE6_PLUGINS/imageformats:PySide6/Qt/plugins/imageformats" \
            --hidden-import=paramiko \
            --hidden-import=requests \
            --hidden-import=cryptography \
            --hidden-import=tzdata \
            --hidden-import=PySide6.QtWidgets \
            --hidden-import=PySide6.QtCore \
            --hidden-import=PySide6.QtGui \
            --hidden-import=PySide6.uic \
            --hidden-import=PIL.Image \
            --hidden-import=login \
            --hidden-import=icons_rc \
            --runtime-hook=runtime-hook.py \
            app.py > pyinstaller.log 2>&1 || (echo "PyInstaller failed" && cat pyinstaller.log && exit 1)
          echo "üìÅ dist/ contents:"
          ls -lh dist
          echo "PyInstaller build completed at $(date)"
        shell: bash

      # Upload PyInstaller log
      - name: Upload PyInstaller log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-log-macos
          path: pyinstaller.log
        if: always()

      # Upload plugins path log
      - name: Upload platforms path log
        uses: actions/upload-artifact@v4
        with:
          name: platforms-path-log-macos
          path: plugins_path.txt
        if: always()

      # Sign app
      - name: Sign App
        run: codesign --deep --force --verbose --sign - dist/PremediaApp.app
        if: ${{ env.APPLE_CERTIFICATE == '' }}
        shell: bash

      - name: Sign App with Developer ID
        run: |
          codesign --deep --force --verbose --sign "Developer ID Application: Your Name" --entitlements entitlements.plist dist/PremediaApp.app
        if: ${{ env.APPLE_CERTIFICATE != '' }}
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        shell: bash

      # Inspect built .app
      - name: Inspect built .app
        run: |
          du -sh dist/PremediaApp.app
          find dist/PremediaApp.app
        shell: bash

      # Build DMG
      - name: Build DMG
        run: |
          mkdir -p dmg-build
          cp -R dist/PremediaApp.app dmg-build/
          dmgbuild -s installer/dmg-settings.py \
                   -D app_path="dmg-build/PremediaApp.app" \
                   "PremediaApp" dist/PremediaApp.dmg
        shell: bash

      # Upload DMG artifact
      - name: Upload DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-macos-dmg
          path: dist/PremediaApp.dmg
          retention-days: 7

  build-windows:
    name: ü™ü Build Windows EXE Installer
    runs-on: windows-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9.13'
          architecture: 'x64'

      # Install Visual Studio Build Tools for C++ (required for docopt, psd-tools)
      - name: Install Visual Studio Build Tools
        run: |
          echo "Installing Visual Studio Build Tools at $(Get-Date)"
          choco install visualstudio2019buildtools --package-parameters "--add Microsoft.VisualStudio.Workload.VCTools --includeRecommended" --no-progress --yes --force
          echo "Verifying MSVC installation..."
          dir "C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC"
          echo "Visual Studio Build Tools installation completed at $(Get-Date)"
        shell: powershell

      # Cache pip packages
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/AppData/Local/pip/Cache
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      # Clear pip cache
      - name: Clear pip cache
        run: pip cache purge
        shell: powershell

      # Install dependencies
      - name: Verify Python and pip
        run: |
          $ErrorActionPreference = 'Stop'
          echo "Verifying Python and pip at $(Get-Date)"
          echo "Current directory: $(Get-Location)"
          try {
            python --version 2>&1 | Out-File -FilePath python_version.log -Encoding utf8
            if ($LASTEXITCODE -ne 0) {
              echo "Python not found"
              Get-Content python_version.log
              exit 1
            }
            echo "Python version:"
            Get-Content python_version.log
          } catch {
            echo "Error running python --version: $_"
            Get-Content python_version.log
            exit 1
          }
          try {
            python -m pip --version 2>&1 | Out-File -FilePath pip_version.log -Encoding utf8
            if ($LASTEXITCODE -ne 0) {
              echo "pip not found"
              Get-Content pip_version.log
              exit 1
            }
            echo "pip version:"
            Get-Content pip_version.log
          } catch {
            echo "Error running python -m pip --version: $_"
            Get-Content pip_version.log
            exit 1
          }
        shell: powershell
        env:
          pythonLocation: C:\hostedtoolcache\windows\Python\3.9.13\x64
          PKG_CONFIG_PATH: C:\hostedtoolcache\windows\Python\3.9.13\x64/lib/pkgconfig
          Python_ROOT_DIR: C:\hostedtoolcache\windows\Python\3.9.13\x64
          Python2_ROOT_DIR: C:\hostedtoolcache\windows\Python\3.9.13\x64
          Python3_ROOT_DIR: C:\hostedtoolcache\windows\Python\3.9.13\x64

      - name: Upgrade pip
        run: |
          $ErrorActionPreference = 'Stop'
          echo "Upgrading pip at $(Get-Date)"
          $pipUpgradeLog = Join-Path (Get-Location) "pip_upgrade.log"
          try {
            python -m pip install --upgrade pip --verbose 2>&1 | Tee-Object -FilePath $pipUpgradeLog
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to upgrade pip"
              Get-Content $pipUpgradeLog
              exit 1
            }
          } catch {
            echo "Error during pip upgrade: $_"
            Get-Content $pipUpgradeLog
            exit 1
          }
        shell: powershell

      - name: Install Visual C++ Redistributable and wheel/setuptools
        run: |
          $ErrorActionPreference = 'Stop'
          echo "Checking write permissions in $(Get-Location) at $(Get-Date)"
          $testFile = Join-Path (Get-Location) "test_write.txt"
          try {
            echo "Test content" | Out-File -FilePath $testFile -Encoding utf8 -ErrorAction Stop
            if (Test-Path $testFile) {
              echo "Write permission confirmed"
              Remove-Item $testFile -Force
            } else {
              echo "Failed to create test file"
              dir | Out-File -FilePath dir_contents.log -Encoding utf8
              Get-Content dir_contents.log
              exit 1
            }
          } catch {
            echo "Error writing test file: $_"
            dir | Out-File -FilePath dir_contents.log -Encoding utf8
            Get-Content dir_contents.log
            exit 1
          }
          echo "Installing Visual C++ Redistributable..."
          $vcredistLog = Join-Path (Get-Location) "vcredist_install.log"
          try {
            choco install vcredist2015 --no-progress --yes --force 2>&1 | Tee-Object -FilePath $vcredistLog
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to install Visual C++ Redistributable"
              Get-Content $vcredistLog
              exit 1
            }
          } catch {
            echo "Error installing Visual C++ Redistributable: $_"
            Get-Content $vcredistLog
            exit 1
          }
          echo "Installing wheel and setuptools..."
          $wheelSetuptoolsLog = Join-Path (Get-Location) "wheel_setuptools.log"
          try {
            python -m pip install --upgrade wheel setuptools --verbose 2>&1 | Tee-Object -FilePath $wheelSetuptoolsLog
            if ($LASTEXITCODE -ne 0) {
              echo "Failed to install wheel/setuptools"
              Get-Content $wheelSetuptoolsLog
              exit 1
            }
          } catch {
            echo "Error installing wheel/setuptools: $_"
            Get-Content $wheelSetuptoolsLog
            exit 1
          }
        shell: powershell

     
      - name: üõ†Ô∏è Upgrade pip and tools
        run: |
          python -m pip install --upgrade pip==24.3.1 setuptools wheel
          python -m pip config set global.index-url https://pypi.org/simple
      - name: üß© Pre-install docopt-ng to prevent build errors
        run: |
          python -m pip install --only-binary=:all: docopt-ng==0.9.0
      - name: ü©π Patch psd-tools dependency to use docopt-ng (safe fork)
        run: |
          python -m pip install --no-deps psd-tools==1.9.30
      - name: üì¶ Install remaining dependencies
        shell: bash
        run: |
          grep -v "psd-tools" requirements.txt > patched-reqs.txt
          python -m pip install --upgrade --prefer-binary -r patched-reqs.txt
      - name: Verify PySide6 plugin directory
        run: |
          $ErrorActionPreference = 'Stop'
          echo "Trying to detect PySide6 plugins..."
          $defaultPluginsPath = python -c "import PySide6, os; print(os.path.join(os.path.dirname(PySide6.__file__), 'Qt', 'plugins'))"
          echo "Default plugins path: $defaultPluginsPath"
          if (-not (Test-Path $defaultPluginsPath)) {
            echo "Default plugins path not found. Attempting fallback..."
            $fallbackPluginsPath = python -c "import PySide6.QtCore; print(PySide6.QtCore.QLibraryInfo.path(PySide6.QtCore.QLibraryInfo.PluginsPath))"
            echo "Fallback plugins path from QLibraryInfo: $fallbackPluginsPath"
            if (-not (Test-Path $fallbackPluginsPath)) {
              echo "Fallback plugins path also not found!"
              exit 1
            } else {
              echo "‚úÖ Found fallback plugins path: $fallbackPluginsPath"
              dir $fallbackPluginsPath
            }
          } else {
            echo "‚úÖ Found plugins directory: $defaultPluginsPath"
            dir $defaultPluginsPath
          }
        shell: powershell



      - name: Create installed packages list
        run: |
          $ErrorActionPreference = 'Stop'
          echo "Creating installed_packages.txt at $(Get-Date)"
          $installPackagesFile = Join-Path (Get-Location) "installed_packages.txt"
          try {
            python -m pip list --verbose 2>&1 | Out-File -FilePath $installPackagesFile -Encoding utf8
            if ($LASTEXITCODE -ne 0) {
              echo "pip list command failed"
              if (Test-Path $installPackagesFile) {
                echo "Partial output in installed_packages.txt:"
                Get-Content $installPackagesFile
              }
              exit 1
            }
          } catch {
            echo "Error running pip list: $_"
            if (Test-Path $installPackagesFile) {
              echo "Partial output in installed_packages.txt:"
              Get-Content $installPackagesFile
            }
            exit 1
          }
          if (-not (Test-Path $installPackagesFile)) {
            echo "installed_packages.txt not created at $installPackagesFile"
            dir | Out-File -FilePath dir_contents.log -Encoding utf8
            echo "Directory contents:"
            Get-Content dir_contents.log
            exit 1
          }
          echo "Contents of installed_packages.txt:"
          Get-Content $installPackagesFile
        shell: powershell

      - name: Install PyInstaller
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Installing PyInstaller at $(Get-Date)"
          
          try {
            python -m pip install pyinstaller==6.14.0 --no-cache-dir --force-reinstall
            Write-Host "‚úÖ PyInstaller installed successfully."
          }
          catch {
            Write-Error "‚ùå Failed to install PyInstaller: $_"
            exit 1
          }
      - name: Upload all install logs
        uses: actions/upload-artifact@v4
        with:
          name: install-logs-windows
          path: |
            *.log
            installed_packages.txt
        if: always()


      # Show installed packages
      - name: Show installed packages
        run: |
          echo "Current directory: $(Get-Location)"
          if (-not (Test-Path installed_packages.txt)) {
            echo "installed_packages.txt not found"
            dir
            exit 1
          }
          echo "Contents of installed_packages.txt:"
          Get-Content installed_packages.txt
        shell: powershell
        if: always()


      # Upload install logs
      - name: Upload requirements install logs
        uses: actions/upload-artifact@v4
        with:
          name: requirements-install-logs-windows
          path: |
            *.log
        if: always()

      - name: Upload PyInstaller install log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-install-log-windows
          path: pyinstaller_install.log
        if: always()

      # Show installed packages
      - name: Show installed packages
        run: Get-Content installed_packages.txt
        shell: powershell
        if: always()

      # Verify required files
      - name: Verify required files exist
        run: |
          if (-not (Test-Path app.py)) { echo "app.py missing"; exit 1 }
          if (-not (Test-Path login.py)) { echo "login.py missing"; exit 1 }
          if (-not (Test-Path icons/premedia.ico)) { echo "premedia.ico missing"; exit 1 }
          if (-not (Test-Path icons/photoshop.png)) { echo "photoshop.png missing"; exit 1 }
          if (-not (Test-Path icons/folder.png)) { echo "folder.png missing"; exit 1 }
          if (-not (Test-Path icons/premedia.png)) { echo "premedia.png missing"; exit 1 }
          if (-not (Test-Path icons/vmg-premedia-logo.png)) { echo "vmg-premedia-logo.png missing"; exit 1 }
          if (-not (Test-Path terms.txt)) { echo "terms.txt missing"; exit 1 }
          if (-not (Test-Path license.txt)) { echo "license.txt missing"; exit 1 }
          if (-not (Test-Path login.ui)) { echo "login.ui missing"; exit 1 }
          if (-not (Test-Path premediaapp.ui)) { echo "premediaapp.ui missing"; exit 1 }
          if (-not (Test-Path icons.qrc)) { echo "icons.qrc missing"; exit 1 }
          if (-not (Test-Path icons_rc.py)) { echo "icons_rc.py missing"; exit 1 }
          if (-not (Test-Path installer/installer.iss)) { echo "installer.iss missing"; exit 1 }
          if (-not (Test-Path runtime-hook.py)) { echo "runtime-hook.py missing"; exit 1 }
          if (-not (Test-Path cache/cache.json)) { echo "cache.json missing"; exit 1 }
        shell: powershell

      - name: Install PySide6 and dependencies (Windows)
        run: |
          $ErrorActionPreference = 'Stop'
          echo "Installing PySide6 dependencies at $(Get-Date)"
          $pyside6Log = Join-Path (Get-Location) "pyside6_install.log"
          try {
            python -m pip install PySide6==6.9.1 PySide6-Essentials==6.9.1 PySide6-Addons==6.9.1 shiboken6==6.9.1 `
              --no-cache-dir --force-reinstall --verbose | Tee-Object -FilePath $pyside6Log
            echo "‚úÖ PySide6 installed successfully."
          }
          catch {
            echo "‚ùå Failed to install PySide6. Showing log:"
            if (Test-Path $pyside6Log) {
              Get-Content $pyside6Log
            }
            exit 1
          }
        shell: powershell



      - name: Build GUI Executable
        run: |
          echo "Finding PySide6 plugins..."
          $pluginsPath = python -c "import PySide6, os; print(os.path.join(os.path.dirname(PySide6.__file__), 'Qt', 'plugins'))"
          if (-not (Test-Path $pluginsPath)) {
            $pluginsPath = python -c "import PySide6.QtCore; print(PySide6.QtCore.QLibraryInfo.path(PySide6.QtCore.QLibraryInfo.PluginsPath))"
          }
          echo "PySide6 plugins path: $pluginsPath"
          echo "Running PyInstaller at $(Get-Date)"

          $pyinstallerLog = "pyinstaller.log"

          python -m PyInstaller --log-level=DEBUG --noconfirm --windowed --onedir `
            --name PremediaApp `
            --icon=icons/premedia.ico `
            --add-data "cache/cache.json;cache" `
            --add-data "icons/premedia.ico;icons" `
            --add-data "icons/photoshop.png;icons" `
            --add-data "icons/folder.png;icons" `
            --add-data "icons/premedia.png;icons" `
            --add-data "icons/vmg-premedia-logo.png;icons" `
            --add-data "terms.txt;." `
            --add-data "license.txt;." `
            --add-data "login.ui;." `
            --add-data "premediaapp.ui;." `
            --add-data "icons.qrc;." `
            --add-data "icons_rc.py;." `
            --add-data "login.py;." `
            --add-data "$pluginsPath/platforms;PySide6/Qt/plugins/platforms" `
            --add-data "$pluginsPath/imageformats;PySide6/Qt/plugins/imageformats" `
            --hidden-import=paramiko `
            --hidden-import=requests `
            --hidden-import=cryptography `
            --hidden-import=tzdata `
            --hidden-import=PySide6.QtWidgets `
            --hidden-import=PySide6.QtCore `
            --hidden-import=PySide6.QtGui `
            --hidden-import=PySide6.uic `
            --hidden-import=PIL.Image `
            --hidden-import=login `
            --hidden-import=icons_rc `
            --hidden-import=docopt_ng `
            --runtime-hook=runtime-hook.py `
            app.py 2>&1 | Tee-Object -FilePath $pyinstallerLog

          if ($LASTEXITCODE -ne 0) {
            echo "‚ùå PyInstaller build failed!"
            Get-Content $pyinstallerLog
            exit 1
          }

          echo "‚úÖ PyInstaller build completed successfully."
          dir dist/PremediaApp
        shell: powershell





      # Upload PyInstaller log
      - name: Upload PyInstaller log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-log-windows
          path: pyinstaller.log
        if: always()

      # Check if EXE exists
      - name: Check if EXE exists
        run: |
          echo "Checking dist/PremediaApp/PremediaApp.exe"
          dir dist/PremediaApp
          if (-not (Test-Path dist/PremediaApp/PremediaApp.exe)) {
            echo "ERROR: Executable not found!"
            exit 1
          }
        shell: powershell

      # Install Inno Setup
      - name: Install Inno Setup
        run: choco install innosetup --no-progress --yes --force
        shell: powershell

      # Verify Inno Setup installed
      - name: Verify Inno Setup installed
        run: |
          where iscc
          if ($LASTEXITCODE -ne 0) { echo "ISCC not found!"; exit 1 }
        shell: powershell

      # Build Installer with Inno Setup
      - name: Build Installer with Inno Setup
        run: |
          echo "Starting Inno Setup build at $(Get-Date)"
          echo "Running Inno Setup compiler..."
          iscc installer/installer.iss
          if (-not (Test-Path Output/PremediaApp-Setup.exe)) {
            echo "ERROR: Installer not created!"
            exit 1
          }
          echo "Inno Setup build completed at $(Get-Date)"
        shell: powershell

      # Upload Installer artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-Windows-Installer
          path: Output/PremediaApp-Setup.exe
          retention-days: 7