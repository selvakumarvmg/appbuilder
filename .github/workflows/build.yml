name: Build and Package PremediaApp

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  APP_NAME: PremediaApp
  APP_VERSION: 1.0.0

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build EXE with PyInstaller
        run: pyinstaller --noconfirm --windowed --onefile --icon=pm.ico --name=${{ env.APP_NAME }} app.py

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Create Windows Installer with Inno Setup
        run: iscc installer/installer.iss

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/${{ env.APP_NAME }}_Setup_${{ env.APP_VERSION }}.exe
          if-no-files-found: error

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-pip libxcb-cursor0 libx11-xcb1 libglu1-mesa desktop-file-utils dpkg-dev

      - name: Install Python packages
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r requirements.txt

      - name: Build Linux executable
        run: |
          pyinstaller --noconfirm --windowed --onefile --icon=pm.png --name=${{ env.APP_NAME }} app.py

      - name: Package .deb
        run: |
          mkdir -p pkg/DEBIAN
          mkdir -p pkg/usr/local/bin
          mkdir -p pkg/usr/share/applications
          mkdir -p pkg/usr/share/icons/hicolor/256x256/apps

          cp dist/${{ env.APP_NAME }} pkg/usr/local/bin/
          cp pm.png pkg/usr/share/icons/hicolor/256x256/apps/${{ env.APP_NAME }}.png

          echo "Package: ${{ env.APP_NAME }}" > pkg/DEBIAN/control
          echo "Version: ${{ env.APP_VERSION }}" >> pkg/DEBIAN/control
          echo "Architecture: amd64" >> pkg/DEBIAN/control
          echo "Maintainer: VMG Digital <contact@vmgdigital.com>" >> pkg/DEBIAN/control
          echo "Description: Background Notifier App" >> pkg/DEBIAN/control
          echo "Depends: libc6, libxcb-cursor0, libx11-xcb1, libglu1-mesa" >> pkg/DEBIAN/control

          cat <<EOF > pkg/usr/share/applications/${{ env.APP_NAME }}.desktop
          [Desktop Entry]
          Name=${{ env.APP_NAME }}
          Exec=/usr/local/bin/${{ env.APP_NAME }}
          Icon=${{ env.APP_NAME }}
          Type=Application
          Categories=Utility;
          Terminal=false
          EOF

          dpkg-deb --build pkg ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

      - name: Upload Ubuntu DEB
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-deb
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt

      - name: Build macOS App Bundle
        run: |
          pyinstaller --noconfirm --windowed --onedir --icon=pm.icns --name=${{ env.APP_NAME }} app.py

      - name: Prepare DMG content
        run: |
          mkdir dmgdir
          cp -r dist/${{ env.APP_NAME }}.app dmgdir/
          cp TERMS.txt dmgdir/

      - name: Create DMG installer
        run: |
          hdiutil create -volname ${{ env.APP_NAME }} \
            -srcfolder dmgdir -ov -format UDZO \
            ${{ env.APP_NAME }}_${{ env.APP_VERSION }}.dmg

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}.dmg
          if-no-files-found: error
