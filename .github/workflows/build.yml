name: Build Windows Installer

on:
  push:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: C:\Users\runneradmin\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Install dependencies
      shell: powershell
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller PySide6 pillow tzdata

    - name: Show source structure
      shell: powershell
      run: |
        Write-Output "Listing source files:"
        Get-ChildItem -Recurse

    - name: Verify UPX availability
      shell: powershell
      run: |
        if (Get-Command upx -ErrorAction SilentlyContinue) {
          Write-Output "UPX is available."
        } else {
          Write-Warning "UPX not found. Set upx=False in app.spec if needed."
        }

    - name: Show app.spec contents
      shell: powershell
      run: |
        Write-Output "Contents of app.spec:"
        Get-Content app.spec

    - name: Build EXE with PyInstaller
      shell: powershell
      run: |
        Set-Location $env:GITHUB_WORKSPACE
        pyinstaller app.spec --clean --noconfirm --log-level DEBUG *> pyinstaller.log
        Write-Output "===== PyInstaller log start ====="
        Get-Content pyinstaller.log
        Write-Output "===== PyInstaller log end ====="
        if ($LASTEXITCODE -ne 0) {
          Write-Error "PyInstaller build failed"
          exit $LASTEXITCODE
        }

    - name: Upload PyInstaller log on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: pyinstaller-log
        path: pyinstaller.log

    - name: Verify dist directory and EXE
      shell: powershell
      run: |
        Set-Location $env:GITHUB_WORKSPACE
        Write-Output "Checking dist directory:"
        Get-ChildItem -Path dist -Recurse -Force | Format-Table -Property Name, Length, LastWriteTime -AutoSize
        $exePath = "dist\PremediaApp.exe"
        if (-not (Test-Path $exePath)) {
          Write-Error "PremediaApp.exe not found in dist/"
          exit 1
        }

    - name: Set up Inno Setup
      uses: Minionguyjpro/Inno-Setup-Action@v1.2.2

    - name: Build Installer with Inno Setup
      shell: powershell
      run: |
        Set-Location $env:GITHUB_WORKSPACE
        iscc installer/installer.iss
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Inno Setup compilation failed with exit code $LASTEXITCODE"
          exit $LASTEXITCODE
        }

    - name: Upload Installer Artifact
      uses: actions/upload-artifact@v4
      with:
        name: PremediaApp-Installer
        path: Output/PremediaApp-Setup.exe
