name: Build PremediaApp

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Verify required files
        run: |
          if (-not (Test-Path "icons\\premedia.ico")) { Write-Error "Missing icons\\premedia.ico"; exit 1 }
          if (-not (Test-Path "terms.txt")) { Write-Error "Missing terms.txt"; exit 1 }
          if (-not (Test-Path "license.txt")) { Write-Error "Missing license.txt"; exit 1 }

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.14.1

      - name: Build with PyInstaller
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon=icons/premedia.ico `
            --add-data "icons;icons" `
            --add-data "terms.txt;." `
            --add-data "license.txt;." `
            --hidden-import=paramiko `
            --hidden-import=tzdata `
            --exclude-module=tkinter `
            --exclude-module=numpy `
            --exclude-module=matplotlib `
            --name PremediaApp app.py --log-level DEBUG

      - name: Verify PyInstaller output
        run: |
          dir dist
          if (-not (Test-Path "dist\\PremediaApp.exe")) {
              Write-Error "dist\\PremediaApp.exe not found. Build failed."
              exit 1
          }

      - name: Package Windows installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: installer/installer.iss

      - name: Verify Output folder
        run: |
          dir installer\\Output
          if (-not (Test-Path "installer\\Output\\PremediaApp-Setup.exe")) {
              Write-Error "PremediaApp-Setup.exe not found. Installer build failed."
              exit 1
          }

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-Windows-${{ matrix.python-version }}
          path: installer/Output/PremediaApp-Setup.exe
          retention-days: 5

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Verify required files
        run: |
          test -f icons/premedia.icns || (echo "Missing icons/premedia.icns" && exit 1)
          test -f terms.txt || (echo "Missing terms.txt" && exit 1)
          test -f license.txt || (echo "Missing license.txt" && exit 1)

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.14.1

      - name: Build macOS App Bundle
        run: |
          pyinstaller --noconfirm --windowed --icon=icons/premedia.icns \
            --add-data "icons:icons" \
            --add-data "terms.txt:." \
            --add-data "license.txt:." \
            --hidden-import=paramiko \
            --hidden-import=tzdata \
            --exclude-module=tkinter \
            --exclude-module=numpy \
            --exclude-module=matplotlib \
            --target-arch universal2 \
            --name PremediaApp app.py --log-level DEBUG

      - name: Debug App Bundle
        run: |
          ls -R dist/PremediaApp.app || echo "App bundle not found"

      - name: Update Info.plist
        run: |
          plutil -replace CFBundleIconFile -string premedia.icns dist/PremediaApp.app/Contents/Info.plist

      - name: Install create-dmg
        run: brew install create-dmg

      - name: Create DMG
        run: |
          mkdir -p Output
          create-dmg \
            --volname "PremediaApp" \
            --volicon "icons/premedia.icns" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "PremediaApp.app" 200 190 \
            --app-drop-link 600 185 \
            Output/PremediaApp.dmg \
            dist

      - name: Verify DMG Output
        run: |
          test -f Output/PremediaApp.dmg && echo "DMG created" || (echo "DMG missing" && exit 1)

      - name: Upload macOS Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-macOS
          path: Output/PremediaApp.dmg
          retention-days: 5

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev libgtk-3-dev dpkg-dev

      - name: Verify required files
        run: |
          test -f icons/premedia.png || (echo "Missing icons/premedia.png" && exit 1)
          test -f terms.txt || (echo "Missing terms.txt" && exit 1)
          test -f license.txt || (echo "Missing license.txt" && exit 1)

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller==6.14.1

      - name: Build Linux Binary
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon=icons/premedia.png \
            --add-data "icons:icons" \
            --add-data "terms.txt:." \
            --add-data "license.txt:." \
            --hidden-import=paramiko \
            --hidden-import=tzdata \
            --exclude-module=tkinter \
            --exclude-module=numpy \
            --exclude-module=matplotlib \
            --name PremediaApp app.py --log-level DEBUG

      - name: Verify PyInstaller Output
        run: |
          test -f dist/PremediaApp && echo "Executable found" || (echo "Executable missing" && exit 1)

      - name: Create .deb package
        run: |
          mkdir -p Output
          mkdir -p dist/debian/usr/bin
          mkdir -p dist/debian/usr/share/applications
          mkdir -p dist/debian/usr/share/icons/hicolor/scalable/apps
          cp dist/PremediaApp dist/debian/usr/bin/
          cp icons/premedia.png dist/debian/usr/share/icons/hicolor/scalable/apps/premedia.png
          cp terms.txt dist/debian/usr/bin/
          cp license.txt dist/debian/usr/bin/
          mkdir -p dist/debian/DEBIAN
          echo "Package: premediaapp" > dist/debian/DEBIAN/control
          echo "Version: 1.0.0" >> dist/debian/DEBIAN/control
          echo "Architecture: amd64" >> dist/debian/DEBIAN/control
          echo "Maintainer: VMG Premedia <support@vmgpremedia.com>" >> dist/debian/DEBIAN/control
          echo "Depends: python3, libgtk-3-0" >> dist/debian/DEBIAN/control
          echo "Description: PremediaApp for image retouching" >> dist/debian/DEBIAN/control
          echo "[Desktop Entry]
          Name=PremediaApp
          Exec=/usr/bin/PremediaApp
          Type=Application
          Icon=premedia
          Terminal=false
          Categories=Utility;" > dist/debian/usr/share/applications/PremediaApp.desktop
          dpkg-deb --build dist/debian Output/PremediaApp.deb

      - name: Verify .deb Output
        run: |
          test -f Output/PremediaApp.deb && echo ".deb created" || (echo ".deb missing" && exit 1)

      - name: Upload Ubuntu Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-Ubuntu
          path: Output/PremediaApp.deb
          retention-days: 5
