# name: build-macos

# on:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   build:
#     name: 🛠️ Build macOS x86_64 App
#     runs-on: macos-13  # ✅ Intel-based macOS runner

#     steps:
#     - name: 🧾 Checkout code
#       uses: actions/checkout@v4

#     - name: 🐍 Set up Python 3.9 (x86_64)
#       uses: actions/setup-python@v5
#       with:
#         python-version: "3.9"
#         architecture: "x64"

#     - name: 🔍 Show system & Python info
#       run: |
#         echo "Python version: $(python3 --version)"
#         echo "Python path: $(which python3)"
#         uname -a
#         sysctl -n machdep.cpu.brand_string
#         sw_vers

#     - name: 📦 Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r requirements.txt
#         pip install "pyinstaller>=6.14,<7" dmgbuild
#         pip list

#     - name: 🔍 Confirm libpython3.9.dylib exists
#       run: |
#         DYLIB_PATH="/Users/runner/hostedtoolcache/Python/3.9.23/x64/lib/libpython3.9.dylib"
#         if [ ! -f "$DYLIB_PATH" ]; then
#           echo "❌ $DYLIB_PATH not found"
#           exit 1
#         else
#           echo "✅ Found: $DYLIB_PATH"
#         fi

#     - name: 🖼️ Verify DMG background image
#       run: |
#         file installer-assets/dmg-background.bmp || true

#     - name: 📜 Print app.spec for review
#       run: |
#         echo "---- app.spec ----"
#         cat app.spec
#         echo "------------------"

#     - name: 🚀 Build with PyInstaller
#       run: |
#         echo "🚀 Building app with PyInstaller..."
#         pyinstaller app.spec
#         echo "📁 dist/ directory contents:"
#         ls -lh dist

#     - name: 🔍 Check built binary architecture
#       run: |
#         file dist/PremediaApp.app/Contents/MacOS/PremediaApp || echo "Binary missing"

#     - name: 🧹 Remove quarantine attribute and ad-hoc sign
#       run: |
#         xattr -rd com.apple.quarantine dist/PremediaApp.app || true
#         codesign --deep --force --verbose --sign - dist/PremediaApp.app

#     - name: 📁 Copy .app into dmg-build directory
#       run: |
#         mkdir -p dmg-build
#         cp -R dist/PremediaApp.app dmg-build/
#         echo "✅ Copied app:"
#         du -sh dmg-build/PremediaApp.app

#     - name: 💿 Build DMG
#       run: |
#         dmgbuild -s installer/dmg-settings.py \
#                  -D app_path="dmg-build/PremediaApp.app" \
#                  "PremediaApp" PremediaApp.dmg

#     - name: 🧪 Verify DMG mount (optional)
#       run: |
#         hdiutil attach PremediaApp.dmg
#         sleep 3
#         ls /Volumes/PremediaApp || echo "❌ Could not mount DMG"
#         hdiutil detach /Volumes/PremediaApp || true

#     - name: 📦 Show final sizes
#       run: |
#         du -sh dist/PremediaApp.app || true
#         du -sh PremediaApp.dmg || true

#     - name: ⬆️ Upload DMG
#       uses: actions/upload-artifact@v4
#       with:
#         name: PremediaApp-macos-dmg
#         path: PremediaApp.dmg

#     - name: ⬆️ Upload .app & build logs
#       uses: actions/upload-artifact@v4
#       with:
#         name: build-logs
#         path: |
#           dist/PremediaApp.app
#           build/



name: Build PremediaApp (macOS & Windows)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-macos:
    name: 🍎 Build macOS x86_64 App
    runs-on: macos-13  # Intel-based for compatibility

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.9 (x64)
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        architecture: "x64"

    - name: 🔍 Show system & Python info
      run: |
        echo "Python version: $(python3 --version)"
        echo "Python path: $(which python3)"
        uname -a
        sysctl -n machdep.cpu.brand_string
        sw_vers

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install "pyinstaller>=6.14,<7" dmgbuild
        pip list

    - name: 🔍 Confirm libpython3.9.dylib exists
      run: |
        DYLIB_PATH="/Users/runner/hostedtoolcache/Python/3.9.23/x64/lib/libpython3.9.dylib"
        if [ ! -f "$DYLIB_PATH" ]; then
          echo "❌ $DYLIB_PATH not found"
          exit 1
        else
          echo "✅ Found: $DYLIB_PATH"
        fi

    - name: 🖼️ Verify DMG background image
      run: |
        file installer-assets/dmg-background.bmp || true

    - name: 📜 Print app.spec
      run: |
        echo "---- app.spec ----"
        cat app.spec
        echo "------------------"

    - name: 🚀 Build with PyInstaller
      run: |
        echo "🚀 Building app with PyInstaller..."
        pyinstaller app.spec
        echo "📁 dist/ directory contents:"
        ls -lh dist

    - name: 🔍 Check binary architecture
      run: |
        file dist/PremediaApp.app/Contents/MacOS/PremediaApp || echo "Binary missing"

    - name: 🧹 Remove quarantine & sign app
      run: |
        xattr -rd com.apple.quarantine dist/PremediaApp.app || true
        codesign --deep --force --verbose --sign - dist/PremediaApp.app

    - name: 📁 Copy .app to dmg-build
      run: |
        mkdir -p dmg-build
        cp -R dist/PremediaApp.app dmg-build/
        du -sh dmg-build/PremediaApp.app

    - name: 💿 Build DMG
      run: |
        dmgbuild -s installer/dmg-settings.py \
                 -D app_path="dmg-build/PremediaApp.app" \
                 "PremediaApp" PremediaApp.dmg

    - name: 🧪 Mount DMG and check contents
      run: |
        hdiutil attach PremediaApp.dmg
        sleep 3
        ls /Volumes/PremediaApp || echo "❌ Could not mount"
        hdiutil detach /Volumes/PremediaApp || true

    - name: 📦 Show final sizes
      run: |
        du -sh dist/PremediaApp.app || true
        du -sh PremediaApp.dmg || true

    - name: ⬆️ Upload DMG
      uses: actions/upload-artifact@v4
      with:
        name: PremediaApp-macos-dmg
        path: PremediaApp.dmg

    - name: ⬆️ Upload .app and logs
      uses: actions/upload-artifact@v4
      with:
        name: macos-app-logs
        path: |
          dist/PremediaApp.app
          build/
          app.spec

  build-windows:
    name: 🪟 Build Windows EXE Installer
    runs-on: windows-latest

    steps:
    - name: 🧾 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"

    - name: 🧪 Show system info
      run: |
        systeminfo
        python --version
        where python
        echo %PROCESSOR_ARCHITECTURE%

    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: 🚀 Build with PyInstaller
      run: |
        pyinstaller app.spec
        dir dist

    - name: 🛠️ Install Inno Setup
      run: choco install innosetup

    - name: 🛠️ Build Windows Installer
      shell: pwsh
      run: |
        & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" "installer\installer.iss"


    - name: ⬆️ Upload EXE
      uses: actions/upload-artifact@v4
      with:
        name: PremediaApp-windows-installer
        path: Output/PremediaApp-Setup.exe

    - name: ⬆️ Upload Windows logs
      uses: actions/upload-artifact@v4
      with:
        name: windows-build-logs
        path: |
          dist/
          build/
          app.spec
