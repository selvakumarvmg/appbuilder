name: Build Notifier App

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  APP_NAME: notifier
  APP_VERSION: 1.0.0
  PUBLISHER: Your Name
  PUBLISHER_EMAIL: you@example.com
  PUBLISHER_URL: https://yourdomain.com
  LICENSE_FILE: LICENSE.txt
  TERMS_FILE: TERMS.txt

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Build Windows executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=pm.ico --name=${{ env.APP_NAME }} app.py

      - name: Download and install Inno Setup Compiler
        shell: powershell
        run: |
          Invoke-WebRequest -Uri https://jrsoftware.org/download.php/is-6.2.1.exe -OutFile is-setup.exe
          Start-Process -FilePath .\is-setup.exe -ArgumentList "/VERYSILENT /SP-" -Wait

      - name: Prepare Inno Setup script
        run: |
          echo '[Setup]' > setup.iss
          echo 'AppName=${{ env.APP_NAME }}' >> setup.iss
          echo 'AppVersion=${{ env.APP_VERSION }}' >> setup.iss
          echo 'AppPublisher=${{ env.PUBLISHER }}' >> setup.iss
          echo 'AppPublisherURL=${{ env.PUBLISHER_URL }}' >> setup.iss
          echo 'DefaultDirName={pf}\\${{ env.APP_NAME }}' >> setup.iss
          echo 'DisableProgramGroupPage=no' >> setup.iss
          echo 'OutputBaseFilename=${{ env.APP_NAME }}-setup' >> setup.iss
          echo 'Compression=lzma' >> setup.iss
          echo 'SolidCompression=yes' >> setup.iss
          echo 'WizardStyle=modern' >> setup.iss
          echo '' >> setup.iss
          echo '[Files]' >> setup.iss
          echo 'Source: "dist\\${{ env.APP_NAME }}.exe"; DestDir: "{app}"; Flags: ignoreversion' >> setup.iss
          echo '' >> setup.iss
          echo '[Icons]' >> setup.iss
          echo 'Name: "{group}\\${{ env.APP_NAME }}"; Filename: "{app}\\${{ env.APP_NAME }}.exe"; IconFilename: "pm.ico"' >> setup.iss
          echo 'Name: "{commondesktop}\\${{ env.APP_NAME }}"; Filename: "{app}\\${{ env.APP_NAME }}.exe"; Tasks: desktopicon; IconFilename: "pm.ico"' >> setup.iss
          echo '' >> setup.iss
          echo '[Tasks]' >> setup.iss
          echo 'Name: desktopicon; Description: "Create a &desktop icon"; GroupDescription: "Additional icons:"; Flags: unchecked' >> setup.iss
          echo '' >> setup.iss
          echo '[Code]' >> setup.iss
          echo 'function NextButtonClick(CurPageID: Integer): Boolean;' >> setup.iss
          echo 'begin' >> setup.iss
          echo '  if CurPageID = wpLicense then' >> setup.iss
          echo '  begin' >> setup.iss
          echo '    if not LicenseAccepted then' >> setup.iss
          echo '    begin' >> setup.iss
          echo '      MsgBox(''You must accept the license agreement to continue.'', mbError, MB_OK);' >> setup.iss
          echo '      Result := False;' >> setup.iss
          echo '      exit;' >> setup.iss
          echo '    end;' >> setup.iss
          echo '  end;' >> setup.iss
          echo '  Result := True;' >> setup.iss
          echo 'end;' >> setup.iss
          echo '' >> setup.iss
          echo '[Messages]' >> setup.iss
          echo 'LicenseAccepted=0' >> setup.iss
          echo '' >> setup.iss
          echo '[LicenseFile]' >> setup.iss
          echo 'Source: "TERMS.txt"' >> setup.iss

      - name: Build Windows installer with Inno Setup
        run: |
          "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe" setup.iss

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: notifier-windows-setup
          path: ${{
            env.APP_NAME
          }}-setup.exe

  build-ubuntu:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Build Linux executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=pm.png --name=${{ env.APP_NAME }} app.py

      - name: Create Debian package structure
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/local/bin
          echo "Package: ${{ env.APP_NAME }}" > package/DEBIAN/control
          echo "Version: ${{ env.APP_VERSION }}" >> package/DEBIAN/control
          echo "Section: utils" >> package/DEBIAN/control
          echo "Priority: optional" >> package/DEBIAN/control
          echo "Architecture: amd64" >> package/DEBIAN/control
          echo "Maintainer: ${{ env.PUBLISHER }} <${{ env.PUBLISHER_EMAIL }}>" >> package/DEBIAN/control
          echo "Description: Notifier app built with PySide6" >> package/DEBIAN/control
          cp dist/${{ env.APP_NAME }} package/usr/local/bin/${{ env.APP_NAME }}
          chmod 755 package/usr/local/bin/${{ env.APP_NAME }}

      - name: Build .deb package
        run: |
          dpkg-deb --build package
          mv package.deb ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@v4
        with:
          name: notifier-ubuntu-deb
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Build macOS app bundle with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=pm.icns --name=${{ env.APP_NAME }} app.py

      - name: Create .dmg installer
        run: |
          mkdir -p dmg/${{ env.APP_NAME }}.app/Contents/MacOS
          cp dist/${{ env.APP_NAME }} dmg/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}
          mkdir -p dmg/${{ env.APP_NAME }}.app/Contents

          echo '<?xml version="1.0" encoding="UTF-8"?>' > dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '"http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<plist version="1.0">' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<dict>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleName</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>${{ env.APP_NAME }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleIdentifier</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>com.yourdomain.${{ env.APP_NAME }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleVersion</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>${{ env.APP_VERSION }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleExecutable</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>${{ env.APP_NAME }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleIconFile</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <string>pm.icns</string>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '</dict>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '</plist>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist

          hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder dmg -ov -format UDZO ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg

      - name: Upload macOS dmg artifact
        uses: actions/upload-artifact@v4
        with:
          name: notifier-macos-dmg
          path: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg
