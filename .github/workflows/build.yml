name: Build Desktop App

on:
  push:
    branches: [main]

env:
  APP_NAME: PremediaApp
  APP_VERSION: 1.0.0

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build EXE with PyInstaller
        run: pyinstaller --noconfirm --windowed --onefile --icon=pm.ico --name=${{ env.APP_NAME }} app.py

      - name: Debug dist directory
        run: dir dist

      - name: Install Inno Setup
        run: choco install innosetup -y

      - name: Create Installer with Inno Setup
        run: iscc installer.iss

      - name: Upload Windows Installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/${{ env.APP_NAME }}_Setup_${{ env.APP_VERSION }}.exe
          if-no-files-found: error

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y libxcb-cursor0 dpkg-dev
          pip install pyinstaller

      - name: Build Linux Binary
        run: |
          pyinstaller --noconfirm --windowed --onefile \
            --icon=pm.png --name=${{ env.APP_NAME }} app.py

      - name: Create DEB Installer
        run: |
          mkdir -p pkg/DEBIAN
          mkdir -p pkg/usr/local/bin
          mkdir -p pkg/usr/share/applications
          cp dist/${{ env.APP_NAME }} pkg/usr/local/bin/
          echo "Package: ${{ env.APP_NAME }}" > pkg/DEBIAN/control
          echo "Version: ${{ env.APP_VERSION }}" >> pkg/DEBIAN/control
          echo "Architecture: amd64" >> pkg/DEBIAN/control
          echo "Maintainer: VMG Digital" >> pkg/DEBIAN/control
          echo "Description: Background Notifier App" >> pkg/DEBIAN/control
          echo '[Desktop Entry]' > pkg/usr/share/applications/${{ env.APP_NAME }}.desktop
          echo 'Name=PremediaApp' >> pkg/usr/share/applications/${{ env.APP_NAME }}.desktop
          echo 'Exec=/usr/local/bin/${{ env.APP_NAME }}' >> pkg/usr/share/applications/${{ env.APP_NAME }}.desktop
          echo 'Icon=pm.png' >> pkg/usr/share/applications/${{ env.APP_NAME }}.desktop
          echo 'Type=Application' >> pkg/usr/share/applications/${{ env.APP_NAME }}.desktop
          echo 'Categories=Utility;' >> pkg/usr/share/applications/${{ env.APP_NAME }}.desktop
          dpkg-deb --build pkg ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

      - name: Upload Ubuntu DEB
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-deb
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Dependencies
        run: |
          pip install pyinstaller

      - name: Build macOS App
        run: |
          pyinstaller --noconfirm --windowed --onefile \
            --icon=pm.icns --name=${{ env.APP_NAME }} app.py

      - name: Create DMG Installer
        run: |
          mkdir dmgdir
          cp dist/${{ env.APP_NAME }} dmgdir/
          echo "Please read and accept the terms in TERMS.txt" > dmgdir/TERMS.txt
          hdiutil create -volname ${{ env.APP_NAME }} \
            -srcfolder dmgdir -ov -format UDZO \
            ${{ env.APP_NAME }}_${{ env.APP_VERSION }}.dmg

      - name: Upload macOS DMG
        uses: actions/upload-artifact@v4
        with:
          name: macos-dmg
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}.dmg
          if-no-files-found: error
