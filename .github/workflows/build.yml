name: Build Notifier App

env:
  APP_NAME: notifier
  APP_VERSION: 1.0.0
  PUBLISHER: "Your Name"
  PUBLISHER_EMAIL: "you@example.com"
  WINDOWS_ICON: pm.ico
  LINUX_ICON: pm.png
  MAC_ICON: pm.icns

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Build Windows executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=${{ env.WINDOWS_ICON }} --name=${{ env.APP_NAME }} app.py

      - name: Create Windows installer with Inno Setup (Optional, needs InnoSetup script)
        run: |
          echo "Skipping installer build here - add your Inno Setup script and call iscc.exe"

      - name: Upload Windows executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: notifier-windows-exe
          path: dist/${{ env.APP_NAME }}.exe

  build-ubuntu:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Build Linux executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=${{ env.LINUX_ICON }} --name=${{ env.APP_NAME }} app.py

      - name: Create Debian package structure
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/local/bin
          echo "Package: ${{ env.APP_NAME }}" > package/DEBIAN/control
          echo "Version: ${{ env.APP_VERSION }}" >> package/DEBIAN/control
          echo "Section: utils" >> package/DEBIAN/control
          echo "Priority: optional" >> package/DEBIAN/control
          echo "Architecture: amd64" >> package/DEBIAN/control
          echo "Maintainer: ${{ env.PUBLISHER }} <${{ env.PUBLISHER_EMAIL }}>" >> package/DEBIAN/control
          echo "Description: Notifier app built with PySide6" >> package/DEBIAN/control
          cp dist/${{ env.APP_NAME }} package/usr/local/bin/${{ env.APP_NAME }}
          chmod 755 package/usr/local/bin/${{ env.APP_NAME }}

      - name: Build .deb package
        run: |
          dpkg-deb --build package
          mv package.deb ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@v4
        with:
          name: notifier-ubuntu-deb
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dev-requirements.txt

      - name: Build macOS app bundle with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=${{ env.MAC_ICON }} --name=${{ env.APP_NAME }} app.py

      - name: Create .dmg installer
        run: |
          mkdir -p dmg/${{ env.APP_NAME }}.app/Contents/MacOS
          cp dist/${{ env.APP_NAME }} dmg/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}
          mkdir -p dmg/${{ env.APP_NAME }}.app/Contents

          echo '<?xml version="1.0" encoding="UTF-8"?>' > dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<plist version="1.0">' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<dict>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleName</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>${{ env.APP_NAME }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleIdentifier</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>com.yourdomain.${{ env.APP_NAME }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleVersion</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>${{ env.APP_VERSION }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleExecutable</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>${{ env.APP_NAME }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '  <key>CFBundleIconFile</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo "  <string>${{ env.MAC_ICON }}</string>" >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '</dict>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '</plist>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist

          hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder dmg -ov -format UDZO ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg

      - name: Upload macOS dmg artifact
        uses: actions/upload-artifact@v4
        with:
          name: notifier-macos-dmg
          path: ${{ env.APP_NAME }}-${{ env.APP_VERSION }}.dmg
