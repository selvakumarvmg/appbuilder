name: Build PremediaApp (macOS & Windows)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-macos:
    name: üõ†Ô∏è Build macOS x86_64 App
    runs-on: macos-13

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9.13'
          architecture: 'x64'

      # Clear pip cache
      - name: Clear pip cache
        run: pip cache purge
        shell: bash

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip cache purge
          echo "Installing requirements..."
          pip install -r requirements.txt --no-cache-dir --force-reinstall --verbose > requirements_install.log 2>&1 || (echo "‚ùå Failed to install requirements" && cat requirements_install.log && exit 1)
          echo "Installing PySide6..."
          pip install PySide6==6.9.1 --no-cache-dir --force-reinstall --verbose > pyside6_install.log 2>&1 || (echo "‚ùå Failed to install PySide6" && cat pyside6_install.log && exit 1)
          echo "Installing PyInstaller..."
          pip install pyinstaller==6.14.0 --no-cache-dir --force-reinstall --verbose > pyinstaller_install.log 2>&1 || (echo "‚ùå PyInstaller installation failed" && cat pyinstaller_install.log && exit 1)
          echo "Installing dmgbuild..."
          pip install dmgbuild --no-cache-dir --force-reinstall --verbose > dmgbuild_install.log 2>&1 || (echo "‚ùå dmgbuild installation failed" && cat dmgbuild_install.log && exit 1)
          pip list > installed_packages.txt
          python -m pip show pyinstaller || (echo "‚ùå PyInstaller not installed" && exit 1)
          python -m pip show PySide6 || (echo "‚ùå PySide6 not installed" && exit 1)
          echo "Checking PySide6 plugins..."
          python -c "import PySide6; import os; plugins_path = os.path.join(os.path.dirname(PySide6.__file__), 'Qt/plugins'); print(plugins_path)" > plugins_path.txt
          cat plugins_path.txt
          ls -ld "$(cat plugins_path.txt)/platforms" || echo "‚ùå PySide6 platforms directory not found"
          ls -ld "$(cat plugins_path.txt)/imageformats" || echo "‚ùå PySide6 imageformats directory not found"
          find / -name qcocoa.dylib 2>/dev/null > plugin_check.txt || echo "No qcocoa.dylib found" >> plugin_check.txt
          find / -name qicns.dylib 2>/dev/null >> plugin_check.txt || echo "No qicns.dylib found" >> plugin_check.txt
          cat plugin_check.txt
        shell: bash

      # Upload install logs
      - name: Upload requirements install log
        uses: actions/upload-artifact@v4
        with:
          name: requirements-install-log-macos
          path: requirements_install.log
        if: always()

      - name: Upload PySide6 install log
        uses: actions/upload-artifact@v4
        with:
          name: pyside6-install-log-macos
          path: pyside6_install.log
        if: always()

      - name: Upload PyInstaller install log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-install-log-macos
          path: pyinstaller_install.log
        if: always()

      - name: Upload dmgbuild install log
        uses: actions/upload-artifact@v4
        with:
          name: dmgbuild-install-log-macos
          path: dmgbuild_install.log
        if: always()

      - name: Upload plugin check log
        uses: actions/upload-artifact@v4
        with:
          name: plugin-check-log-macos
          path: plugin_check.txt
        if: always()

      # Show installed packages
      - name: Show installed packages
        run: cat installed_packages.txt
        shell: bash

      # Verify required files
      - name: Verify required files
        run: |
          test -f app.py || (echo "‚ùå app.py missing" && exit 1)
          test -f login.py || (echo "‚ùå login.py missing" && exit 1)
          test -f icons/premedia.icns || (echo "‚ùå premedia.icns missing" && exit 1)
          test -f icons/photoshop.png || (echo "‚ùå photoshop.png missing" && exit 1)
          test -f icons/folder.png || (echo "‚ùå folder.png missing" && exit 1)
          test -f icons/premedia.png || (echo "‚ùå premedia.png missing" && exit 1)
          test -f icons/vmg-premedia-logo.png || (echo "‚ùå vmg-premedia-logo.png missing" && exit 1)
          test -f terms.txt || (echo "‚ùå terms.txt missing" && exit 1)
          test -f license.txt || (echo "‚ùå license.txt missing" && exit 1)
          test -f login.ui || (echo "‚ùå login.ui missing" && exit 1)
          test -f premediaapp.ui || (echo "‚ùå premediaapp.ui missing" && exit 1)
          test -f icons.qrc || (echo "‚ùå icons.qrc missing" && exit 1)
          test -f icons_rc.py || (echo "‚ùå icons_rc.py missing" && exit 1)
          test -f installer/dmg-settings.py || (echo "‚ùå dmg-settings.py missing" && exit 1)
          test -f installer-assets/dmg-background.bmp || (echo "‚ùå DMG background missing" && exit 1)
          test -f runtime-hook.py || (echo "‚ùå runtime-hook.py missing" && exit 1)
          test -f cache/cache.json || (echo "‚ùå cache.json missing" && exit 1)
        shell: bash

      # Build app with PyInstaller
      - name: Build App with PyInstaller
        run: |
          echo "===== Building with PyInstaller ====="
          echo "Checking syntax of app.py..."
          python -m py_compile app.py || (echo "‚ùå Syntax error in app.py" && exit 1)
          echo "Finding PySide6 plugins..."
          python -c "import PySide6; import os; plugins_path = os.path.join(os.path.dirname(PySide6.__file__), 'Qt/plugins'); print(plugins_path)" > plugins_path.txt
          export PYSIDE6_PLUGINS=$(cat plugins_path.txt)
          echo "PYSIDE6_PLUGINS=$PYSIDE6_PLUGINS"
          ls -ld "$PYSIDE6_PLUGINS/platforms" || (echo "‚ùå Platforms directory not found at $PYSIDE6_PLUGINS/platforms" && exit 1)
          ls -ld "$PYSIDE6_PLUGINS/imageformats" || (echo "‚ùå Imageformats directory not found at $PYSIDE6_PLUGINS/imageformats" && exit 1)
          echo "Running PyInstaller..."
          python -m PyInstaller --log-level=DEBUG --noconfirm --windowed --onedir \
            --name PremediaApp \
            --icon=icons/premedia.icns \
            --add-data "cache/cache.json:cache" \
            --add-data "icons/premedia.icns:icons" \
            --add-data "icons/photoshop.png:icons" \
            --add-data "icons/folder.png:icons" \
            --add-data "icons/premedia.png:icons" \
            --add-data "icons/vmg-premedia-logo.png:icons" \
            --add-data "terms.txt:." \
            --add-data "license.txt:." \
            --add-data "login.ui:." \
            --add-data "premediaapp.ui:." \
            --add-data "icons.qrc:." \
            --add-data "icons_rc.py:." \
            --add-data "login.py:." \
            --add-data "$PYSIDE6_PLUGINS/platforms:PySide6/Qt/plugins/platforms" \
            --add-data "$PYSIDE6_PLUGINS/imageformats:PySide6/Qt/plugins/imageformats" \
            --hidden-import=paramiko \
            --hidden-import=requests \
            --hidden-import=cryptography \
            --hidden-import=tzdata \
            --hidden-import=PySide6.QtWidgets \
            --hidden-import=PySide6.QtCore \
            --hidden-import=PySide6.QtGui \
            --hidden-import=PySide6.uic \
            --hidden-import=PIL.Image \
            --hidden-import=login \
            --hidden-import=icons_rc \
            --collect-submodules PySide6 \
            --runtime-hook=runtime-hook.py \
            app.py > pyinstaller.log 2>&1 || (echo "PyInstaller failed" && cat pyinstaller.log && exit 1)
          echo "üìÅ dist/ contents:"
          ls -lh dist
        shell: bash

      # Upload PyInstaller log
      - name: Upload PyInstaller log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-log-macos
          path: pyinstaller.log
        if: always()

      # Upload plugins path log
      - name: Upload platforms path log
        uses: actions/upload-artifact@v4
        with:
          name: platforms-path-log-macos
          path: plugins_path.txt
        if: always()

      # Sign app
      - name: Sign App
        run: codesign --deep --force --verbose --sign - dist/PremediaApp.app
        if: ${{ env.APPLE_CERTIFICATE == '' }}
        shell: bash

      - name: Sign App with Developer ID
        run: |
          codesign --deep --force --verbose --sign "Developer ID Application: Your Name" --entitlements entitlements.plist dist/PremediaApp.app
        if: ${{ env.APPLE_CERTIFICATE != '' }}
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        shell: bash

      # Inspect built .app
      - name: Inspect built .app
        run: |
          du -sh dist/PremediaApp.app
          find dist/PremediaApp.app
        shell: bash

      # Build DMG
      - name: Build DMG
        run: |
          mkdir -p dmg-build
          cp -R dist/PremediaApp.app dmg-build/
          dmgbuild -s installer/dmg-settings.py \
                   -D app_path="dmg-build/PremediaApp.app" \
                   "PremediaApp" dist/PremediaApp.dmg
        shell: bash

      # Upload DMG artifact
      - name: Upload DMG Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-macos-dmg
          path: dist/PremediaApp.dmg
          retention-days: 7

  build-windows:
    name: ü™ü Build Windows EXE Installer
    runs-on: windows-latest

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9.13'
          architecture: 'x64'

      # Clear pip cache
      - name: Clear pip cache
        run: pip cache purge
        shell: cmd

      # Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --no-cache-dir --force-reinstall --verbose > requirements_install.log 2>&1 || (echo "‚ùå Failed to install requirements" && type requirements_install.log && exit 1)
          echo "Installing PyInstaller..."
          pip install pyinstaller==6.14.0 --no-cache-dir --force-reinstall --verbose > pyinstaller_install.log 2>&1 || (echo "‚ùå PyInstaller installation failed" && type pyinstaller_install.log && exit 1)
          pip list > installed_packages.txt
          python -m pip show pyinstaller || (echo "‚ùå PyInstaller not installed" && exit 1)
          python -m pip show PySide6 || (echo "‚ùå PySide6 not installed" && exit 1)
          echo "Checking PySide6 plugins..."
          python -c "import PySide6; import os; print(os.path.join(os.path.dirname(PySide6.__file__), 'Qt/plugins'))" > plugins_path.txt
          type plugins_path.txt
          dir "$(type plugins_path.txt | findstr /R "^.*$")" || echo "‚ùå PySide6 plugins directory missing"
        shell: cmd

      # Upload install logs
      - name: Upload requirements install log
        uses: actions/upload-artifact@v4
        with:
          name: requirements-install-log-windows
          path: requirements_install.log
        if: always()

      - name: Upload PyInstaller install log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-install-log-windows
          path: pyinstaller_install.log
        if: always()

      # Show installed packages
      - name: Show installed packages
        run: type installed_packages.txt
        shell: cmd
        if: always()

      # Verify required files
      - name: Verify required files exist
        run: |
          dir app.py || (echo "‚ùå app.py missing" && exit 1)
          dir login.py || (echo "‚ùå login.py missing" && exit 1)
          dir icons\premedia.ico || (echo "‚ùå premedia.ico missing" && exit 1)
          dir icons\photoshop.png || (echo "‚ùå photoshop.png missing" && exit 1)
          dir icons\folder.png || (echo "‚ùå folder.png missing" && exit 1)
          dir icons\premedia.png || (echo "‚ùå premedia.png missing" && exit 1)
          dir icons\vmg-premedia-logo.png || (echo "‚ùå vmg-premedia-logo.png missing" && exit 1)
          dir terms.txt || (echo "‚ùå terms.txt missing" && exit 1)
          dir license.txt || (echo "‚ùå license.txt missing" && exit 1)
          dir login.ui || (echo "‚ùå login.ui missing" && exit 1)
          dir premediaapp.ui || (echo "‚ùå premediaapp.ui missing" && exit 1)
          dir icons.qrc || (echo "‚ùå icons.qrc missing" && exit 1)
          dir icons_rc.py || (echo "‚ùå icons_rc.py missing" && exit 1)
          dir installer\installer.iss || (echo "‚ùå installer.iss missing" && exit 1)
          dir runtime-hook.py || (echo "‚ùå runtime-hook.py missing" && exit 1)
          dir cache\cache.json || (echo "‚ùå cache.json missing" && exit 1)
        shell: cmd

      # Build GUI executable
      - name: Build GUI Executable
        run: |
          echo ===== Building with PyInstaller =====
          echo Checking syntax of app.py...
          python -m py_compile app.py || (echo "‚ùå Syntax error in app.py" && exit 1)
          set PYSIDE6_PLUGINS=%LocalAppData%\Programs\Python\Python39\Lib\site-packages\PySide6\Qt\plugins
          echo PYSIDE6_PLUGINS=%PYSIDE6_PLUGINS%
          dir "%PYSIDE6_PLUGINS%\platforms" || (echo "‚ùå Platforms directory missing" && exit 1)
          dir "%PYSIDE6_PLUGINS%\imageformats" || (echo "‚ùå Imageformats directory missing" && exit 1)
          echo Running PyInstaller...
          python -m PyInstaller --log-level=DEBUG --noconfirm --windowed --onedir ^
            --name PremediaApp ^
            --icon=icons\premedia.ico ^
            --add-data "cache\cache.json;cache" ^
            --add-data "icons\premedia.ico;icons" ^
            --add-data "icons\photoshop.png;icons" ^
            --add-data "icons\folder.png;icons" ^
            --add-data "icons\premedia.png;icons" ^
            --add-data "icons\vmg-premedia-logo.png;icons" ^
            --add-data "terms.txt;." ^
            --add-data "license.txt;." ^
            --add-data "login.ui;." ^
            --add-data "premediaapp.ui;." ^
            --add-data "icons.qrc;." ^
            --add-data "icons_rc.py;." ^
            --add-data "login.py;." ^
            --add-data "%PYSIDE6_PLUGINS%\platforms;PySide6\Qt\plugins\platforms" ^
            --add-data "%PYSIDE6_PLUGINS%\imageformats;PySide6\Qt\plugins\imageformats" ^
            --hidden-import=paramiko ^
            --hidden-import=requests ^
            --hidden-import=cryptography ^
            --hidden-import=tzdata ^
            --hidden-import=PySide6.QtWidgets ^
            --hidden-import=PySide6.QtCore ^
            --hidden-import=PySide6.QtGui ^
            --hidden-import=PySide6.uic ^
            --hidden-import=PIL.Image ^
            --hidden-import=login ^
            --hidden-import=icons_rc ^
            --collect-submodules PySide6 ^
            --runtime-hook=runtime-hook.py ^
            app.py > pyinstaller.log 2>&1 || (echo "PyInstaller failed" && type pyinstaller.log && exit 1)
          echo dist/ contents:
          dir dist\PremediaApp
        shell: cmd

      # Upload PyInstaller log
      - name: Upload PyInstaller log
        uses: actions/upload-artifact@v4
        with:
          name: pyinstaller-log-windows
          path: pyinstaller.log
        if: always()

      # Check if EXE exists
      - name: Check if EXE exists
        run: |
          echo Checking dist\PremediaApp\PremediaApp.exe
          dir dist\PremediaApp
          if not exist dist\PremediaApp\PremediaApp.exe (
            echo ERROR: Executable not found!
            exit 1
          )
        shell: cmd

      # Install Inno Setup
      - name: Install Inno Setup
        run: choco install innosetup --no-progress --yes --force
        shell: cmd

      # Verify Inno Setup installed
      - name: Verify Inno Setup installed
        run: where iscc || echo "ISCC not found!"
        shell: cmd

      # Build Installer with Inno Setup
      - name: Build Installer with Inno Setup
        run: |
          echo Running Inno Setup compiler...
          iscc installer\installer.iss
          if not exist Output\PremediaApp-Setup.exe (
            echo ERROR: Installer not created!
            exit 1
          )
        shell: cmd

      # Upload Installer artifact
      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-Windows-Installer
          path: Output/PremediaApp-Setup.exe
          retention-days: 7