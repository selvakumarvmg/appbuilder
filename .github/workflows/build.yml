name: Build PremediaApp

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  APP_NAME: PremediaApp
  APP_VERSION: 1.0.0
  PUBLISHER: "VMG DIGITAL PVT LTD"
  PUBLISHER_EMAIL: "admin@vmgdigita.com"
  PRIVACY_POLICY: "https://create.vmgdigital.com/privacy-policy.html"
  SUPPORT_EMAIL: "admin@vmgdigita.com"
  SUPPORT_INFO: "Support included"
  LICENSE_TYPE: "Free License"
  JURISDICTION: "Laws of India"
  CONTACT_INFO: "24, 25 & 26, Taylors Rd, Kilpauk, Chennai, Tamil Nadu 600010"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=pm.ico --name=${{ env.APP_NAME }} app.py

      - name: Download and install Inno Setup
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "isetup.exe"
          Start-Process -FilePath .\isetup.exe -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/SP-" -Wait

      - name: Create Inno Setup script
        shell: pwsh
        run: |
          Set-Content -Path installer.iss -Value @"
          [Setup]
          AppName=${{ env.APP_NAME }}
          AppVersion=${{ env.APP_VERSION }}
          AppPublisher=${{ env.PUBLISHER }}
          AppPublisherURL=https://vmgdigital.com
          AppSupportURL=https://vmgdigital.com/support
          DefaultDirName={pf}\${{ env.APP_NAME }}
          DefaultGroupName=${{ env.APP_NAME }}
          OutputBaseFilename=${{ env.APP_NAME }}_Setup_${{ env.APP_VERSION }}
          Compression=lzma
          SolidCompression=yes

          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"

          [Tasks]
          Name: "desktopicon"; Description: "Create a &desktop icon"; GroupDescription: "Additional icons:"; Flags: unchecked

          [Files]
          Source: "dist\\${{ env.APP_NAME }}.exe"; DestDir: "{app}"; Flags: ignoreversion

          [Icons]
          Name: "{group}\${{ env.APP_NAME }}"; Filename: "{app}\${{ env.APP_NAME }}.exe"
          Name: "{commondesktop}\${{ env.APP_NAME }}"; Filename: "{app}\${{ env.APP_NAME }}.exe"; Tasks: desktopicon

          [Run]
          Filename: "{app}\${{ env.APP_NAME }}.exe"; Description: "Launch ${{ env.APP_NAME }}"; Flags: nowait postinstall skipifsilent
          "@

      - name: Build Windows installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss

      - name: Upload Windows installer
        uses: actions/upload-artifact@v4
        with:
          name: premediaapp-windows-installer
          path: ${{ env.APP_NAME }}_Setup_${{ env.APP_VERSION }}.exe

  build-ubuntu:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --onefile --windowed --icon=pm.png --name=${{ env.APP_NAME }} app.py

      - name: Prepare Debian package
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/local/bin
          echo "Package: ${{ env.APP_NAME }}" > package/DEBIAN/control
          echo "Version: ${{ env.APP_VERSION }}" >> package/DEBIAN/control
          echo "Section: utils" >> package/DEBIAN/control
          echo "Priority: optional" >> package/DEBIAN/control
          echo "Architecture: amd64" >> package/DEBIAN/control
          echo "Maintainer: ${{ env.PUBLISHER }} <${{ env.PUBLISHER_EMAIL }}>" >> package/DEBIAN/control
          echo "Description: Notifier app built with PySide6" >> package/DEBIAN/control
          echo "License: ${{ env.LICENSE_TYPE }}" >> package/DEBIAN/control
          echo "Homepage: ${{ env.PRIVACY_POLICY }}" >> package/DEBIAN/control
          cp dist/${{ env.APP_NAME }} package/usr/local/bin/${{ env.APP_NAME }}
          chmod 755 package/usr/local/bin/${{ env.APP_NAME }}

      - name: Build .deb package
        run: |
          dpkg-deb --build package
          mv package.deb ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: premediaapp-ubuntu-deb
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}_amd64.deb

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable
        run: |
          pyinstaller --onefile --windowed --icon=pm.icns --name=${{ env.APP_NAME }} app.py

      - name: Create .dmg
        run: |
          mkdir -p dmg/${{ env.APP_NAME }}.app/Contents/MacOS
          cp dist/${{ env.APP_NAME }} dmg/${{ env.APP_NAME }}.app/Contents/MacOS/${{ env.APP_NAME }}
          echo '<?xml version="1.0" encoding="UTF-8"?>' > dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<plist version="1.0">' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<dict>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<key>CFBundleName</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<string>${{ env.APP_NAME }}</string>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<key>CFBundleIdentifier</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<string>com.vmgdigital.premediaapp</string>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<key>CFBundleVersion</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<string>${{ env.APP_VERSION }}</string>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<key>CFBundleExecutable</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<string>${{ env.APP_NAME }}</string>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<key>CFBundleIconFile</key>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '<string>pm.icns</string>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '</dict>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          echo '</plist>' >> dmg/${{ env.APP_NAME }}.app/Contents/Info.plist
          hdiutil create -volname "${{ env.APP_NAME }}" -srcfolder dmg -ov -format UDZO ${{ env.APP_NAME }}_${{ env.APP_VERSION }}.dmg

      - name: Upload macOS dmg
        uses: actions/upload-artifact@v4
        with:
          name: premediaapp-macos-dmg
          path: ${{ env.APP_NAME }}_${{ env.APP_VERSION }}.dmg
