name: Build PremediaApp

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  APP_NAME: PremediaApp
  APP_VERSION: 1.0.0
  PUBLISHER: "VMG DIGITAL PVT LTD"
  PUBLISHER_EMAIL: "admin@vmgdigita.com"
  PRIVACY_POLICY: "https://create.vmgdigital.com/privacy-policy.html"
  SUPPORT_EMAIL: "admin@vmgdigita.com"
  SUPPORT_INFO: "Support included"
  LICENSE_TYPE: "Free License"
  JURISDICTION: "Laws of India"
  CONTACT_INFO: "24, 25 & 26, Taylors Rd, Kilpauk, Chennai, Tamil Nadu 600010"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=pm.ico --name=%APP_NAME% app.py

      - name: Download and install Inno Setup silently
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "issetup.exe"
          Start-Process -FilePath .\issetup.exe -ArgumentList "/VERYSILENT", "/SUPPRESSMSGBOXES", "/NORESTART", "/SP-" -Wait

      - name: Create Inno Setup installer script
        shell: pwsh
        run: |
          @"
          [Setup]
          AppName=%APP_NAME%
          AppVersion=%APP_VERSION%
          AppPublisher=%PUBLISHER%
          AppPublisherURL=https://vmgdigital.com
          AppSupportURL=https://vmgdigital.com/support
          AppUpdatesURL=https://vmgdigital.com/updates
          DefaultDirName={pf}\%APP_NAME%
          DefaultGroupName=%APP_NAME%
          OutputBaseFilename=%APP_NAME%_Setup_%APP_VERSION%
          Compression=lzma
          SolidCompression=yes
          LicenseFile=TERMS.txt
          InfoBeforeFile=LICENSE.txt
          UninstallDisplayIcon={app}\%APP_NAME%.exe
          UninstallDisplayName=%APP_NAME% %APP_VERSION%
          Uninstallable=yes
          CreateUninstallRegKey=yes
          UsePreviousAppDir=no

          [Languages]
          Name: "english"; MessagesFile: "compiler:Default.isl"

          [Tasks]
          Name: "desktopicon"; Description: "Create a &desktop icon"; GroupDescription: "Additional icons:"; Flags: unchecked

          [Files]
          Source: "dist\%APP_NAME%.exe"; DestDir: "{app}"; Flags: ignoreversion

          [Icons]
          Name: "{group}\%APP_NAME%"; Filename: "{app}\%APP_NAME%.exe"
          Name: "{commondesktop}\%APP_NAME%"; Filename: "{app}\%APP_NAME%.exe"; Tasks: desktopicon

          [Run]
          Filename: "{app}\%APP_NAME%.exe"; Description: "Launch %APP_NAME%"; Flags: nowait postinstall skipifsilent
          "@ > installer.iss

      - name: Build Windows installer
        shell: pwsh
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" installer.iss

      - name: Upload Windows installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: premediaapp-windows-installer
          path: ${{ env.APP_NAME }}_Setup_${{ env.APP_VERSION }}.exe

  build-ubuntu:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build executable with PyInstaller
        run: |
          pyinstaller --onefile --windowed --icon=pm.png --name=${APP_NAME} app.py

      - name: Prepare Debian package with echo
        run: |
          mkdir -p package/DEBIAN
          mkdir -p package/usr/local/bin
          echo "Package: $(echo '${APP_NAME}' | tr '[:upper:]' '[:lower:]')" > package/DEBIAN/control
          echo "Version: ${APP_VERSION}" >> package/DEBIAN/control
          echo "Section: utils" >> package/DEBIAN/control
          echo "Priority: optional" >> package/DEBIAN/control
          echo "Architecture: amd64" >> package/DEBIAN/control
          echo "Maintainer: ${PUBLISHER} <${PUBLISHER_EMAIL}>" >> package/DEBIAN/control
          echo "Description: Premedia app built with PySide6" >> package/DEBIAN/control
          echo "License: ${LICENSE_TYPE}" >> package/DEBIAN/control
          echo "Homepage: https://vmgdigital.com" >> package/DEBIAN/control
          cp dist/${APP_NAME} package/usr/local/bin/${APP_NAME}
          chmod 755 package/usr/local/bin/${APP_NAME}

      - name: Build Debian package
        run: |
          dpkg-deb --build package
          mv package.deb ${APP_NAME}_${APP_VERSION}_amd64.deb

      - name: Upload Debian package artifact
        uses: actions/upload-artifact@v4
        with:
          name: premediaapp-ubuntu-deb
          path: ${APP_NAME}_${APP_VERSION}_amd64.deb

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Build macOS app bundle
        run: |
          pyinstaller --onefile --windowed --icon=pm.icns --name=${APP_NAME} app.py

      - name: Prepare app bundle and DMG with echo
        run: |
          mkdir -p dmg/${APP_NAME}.app/Contents/MacOS
          cp dist/${APP_NAME} dmg/${APP_NAME}.app/Contents/MacOS/${APP_NAME}

          echo '<?xml version="1.0" encoding="UTF-8"?>' > dmg/${APP_NAME}.app/Contents/Info.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '<plist version="1.0">' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '<dict>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '  <key>CFBundleName</key>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo "  <string>${APP_NAME}</string>" >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '  <key>CFBundleIdentifier</key>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo "  <string>com.vmgdigital.${APP_NAME,,}</string>" >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '  <key>CFBundleVersion</key>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo "  <string>${APP_VERSION}</string>" >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '  <key>CFBundleExecutable</key>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo "  <string>${APP_NAME}</string>" >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '  <key>CFBundleIconFile</key>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '  <string>pm.icns</string>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '</dict>' >> dmg/${APP_NAME}.app/Contents/Info.plist
          echo '</plist>' >> dmg/${APP_NAME}.app/Contents/Info.plist

          hdiutil create -volname "${APP_NAME}" -srcfolder dmg -ov -format UDZO ${APP_NAME}_${APP_VERSION}.dmg

      - name: Upload macOS dmg artifact
        uses: actions/upload-artifact@v4
        with:
          name: premediaapp-macos-dmg
          path: ${APP_NAME}_${APP_VERSION}.dmg
