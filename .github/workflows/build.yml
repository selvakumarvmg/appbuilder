name: Build PremediaApp

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
          pip check
          pip list > installed_packages.txt
        shell: cmd
        continue-on-error: true

      - name: Debug installed packages
        run: type installed_packages.txt
        shell: cmd
        if: always()

      - name: Verify required files
        run: |
          dir app.py
          dir terms.txt
          dir license.txt
          dir icons\premedia.ico
          dir icons\photoshop.png
          dir icons\folder.png
          dir login.ui
          dir premediaapp.ui
          dir icons.qrc
          dir icons_rc.py
          dir installer\installer.iss
          dir login.py
        shell: cmd
        continue-on-error: true

      - name: Debug repository files
        run: dir /s
        shell: cmd
        if: always()

      - name: Check login.py syntax
        run: python -m py_compile login.py
        shell: cmd
        continue-on-error: true

      - name: Minimal PyInstaller test
        run: |
          pyinstaller --onefile --name PremediaApp app.py > pyinstaller_minimal.log 2>&1
        shell: cmd
        continue-on-error: true

      - name: Preserve minimal build output
        run: |
          if exist dist\PremediaApp.exe copy dist\PremediaApp.exe dist\PremediaApp_minimal.exe
        shell: cmd
        if: always()
        continue-on-error: true

      - name: Debug minimal PyInstaller logs
        run: |
          type pyinstaller_minimal.log || echo "pyinstaller_minimal.log not found"
          type build\PremediaApp\warn-PremediaApp.txt || echo "warn-PremediaApp.txt not found"
          type PremediaApp.spec || echo "PremediaApp.spec not found"
        shell: cmd
        if: always()
        continue-on-error: true

      - name: Verify minimal build output
        run: dir dist\PremediaApp.exe
        shell: cmd
        if: always()
        continue-on-error: true

      - name: Build Executable with GUI
        run: |
          pyinstaller --noconfirm --onefile --windowed --name PremediaApp app.py > pyinstaller_gui.log 2>&1
        shell: cmd
        continue-on-error: true

      - name: Build Executable with icon and data
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon=icons\premedia.ico ^
            --add-data "icons\icons;icons" ^
            --add-data "terms.txt;." ^
            --add-data "license.txt;." ^
            --add-data "login.ui;." ^
            --add-data "premediaapp.ui;." ^
            --add-data "icons.qrc;." ^
            --add-data "icons_rc.py;." ^
            --add-data "login.py;." ^
            --name PremediaApp app.py > pyinstaller_icon_data.log 2>&1
        shell: cmd
        continue-on-error: true

      - name: Build Executable full
        run: |
          pyinstaller --noconfirm --onefile --windowed --icon=icons\premedia.ico ^
            --add-data "icons\icons;icons" ^
            --add-data "terms.txt;." ^
            --add-data "license.txt;." ^
            --add-data "login.ui;." ^
            --add-data "premediaapp.ui;." ^
            --add-data "icons.qrc;." ^
            --add-data "icons_rc.py;." ^
            --add-data "login.py;." ^
            --hidden-import=paramiko ^
            --hidden-import=tzdata ^
            --hidden-import=PySide6.QtWidgets ^
            --hidden-import=PySide6.QtCore ^
            --hidden-import=PySide6.QtGui ^
            --hidden-import=PySide6.uic ^
            --hidden-import=PIL ^
            --hidden-import=PIL.Image ^
            --hidden-import=icons_rc ^
            --hidden-import=login ^
            --collect-all PySide6 ^
            --log-level=DEBUG ^
            --name PremediaApp app.py > pyinstaller_full.log 2>&1
        shell: cmd
        continue-on-error: true

      - name: Debug full PyInstaller logs
        run: |
          type pyinstaller_gui.log || echo "pyinstaller_gui.log not found"
          type pyinstaller_icon_data.log || echo "pyinstaller_icon_data.log not found"
          type pyinstaller_full.log || echo "pyinstaller_full.log not found"
          type build\PremediaApp\warn-PremediaApp.txt || echo "warn-PremediaApp.txt not found"
          type PremediaApp.spec || echo "PremediaApp.spec not found"
        shell: cmd
        if: always()
        continue-on-error: true

      - name: Debug dist folder
        run: dir dist
        shell: cmd
        if: always()

      - name: Restore minimal build output for Inno Setup
        run: |
          if exist dist\PremediaApp_minimal.exe copy dist\PremediaApp_minimal.exe dist\PremediaApp.exe
        shell: cmd
        if: always()
        continue-on-error: true

      - name: Create Output directory
        run: mkdir Output
        shell: cmd
        if: always()

      - name: Package with Inno Setup
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.2
        with:
          path: installer\installer.iss
        continue-on-error: true

      - name: Debug Output folder
        run: dir Output
        shell: cmd
        if: always()

      - name: Upload Windows Artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-Windows
          path: Output\PremediaApp-Setup.exe
          retention-days: 5
        if: success()