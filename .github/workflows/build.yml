name: Build PremediaApp

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install core dependencies
        timeout-minutes: 20
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Dependencies installed: $(pip list)"

      - name: Install PyInstaller
        run: |
          pip install pyinstaller==6.14.1

      - name: Build with PyInstaller
        timeout-minutes: 60
        run: |
          dir icons
          pyinstaller --noconfirm --onefile --windowed --icon=icons/premedia.ico `
            --add-data "icons;icons" `
            --add-data "terms.txt;." `
            --add-data "license.txt;." `
            --hidden-import=paramiko `
            --hidden-import=tzdata `
            --exclude-module=tkinter `
            --exclude-module=numpy `
            --exclude-module=matplotlib `
            --name PremediaApp app.py --log-level DEBUG
          dir dist || echo "dist/ directory not found"

      - name: Package Windows installer
        run: |
          echo "Packaging Windows installer..."
          dir dist\icons || echo "dist/icons/ directory not found"
          iscc installer.iss || echo "Inno Setup failed, check logs"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-Windows-${{ matrix.python-version }}
          path: Output/PremediaApp-Setup.exe
          retention-days: 5

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        env:
          ARCHFLAGS: "-arch x86_64 -arch arm64"
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install --force-reinstall --no-binary cffi cffi==1.17.1
          pip install --force-reinstall --no-binary Pillow Pillow==11.3.0
          echo "Dependencies installed: $(pip list)"

      - name: Install PyInstaller
        run: |
          pip install pyinstaller==6.14.1

      - name: Run tests
        run: |
          python -m unittest discover -s tests -p "test_*.py" || echo "Tests failed, continuing to build..."

      - name: Build with PyInstaller
        timeout-minutes: 60
        run: |
          ls -R icons
          pyinstaller --noconfirm --windowed --icon=icons/premedia.icns \
            --add-data "icons:icons" \
            --add-data "terms.txt:." \
            --add-data "license.txt:." \
            --hidden-import=paramiko \
            --hidden-import=tzdata \
            --exclude-module=tkinter \
            --exclude-module=numpy \
            --exclude-module=matplotlib \
            --target-arch universal2 \
            --name PremediaApp app.py --log-level DEBUG
          ls -R dist || echo "dist/ directory not found"

      - name: Update Info.plist
        run: |
          plutil -replace CFBundleIconFile -string premedia.icns dist/PremediaApp.app/Contents/Info.plist
          plutil -replace NSHighResolutionCapable -bool true dist/PremediaApp.app/Contents/Info.plist
          plutil -replace CFBundleIdentifier -string com.vmgpremedia.PremediaApp dist/PremediaApp.app/Contents/Info.plist
          plutil -replace CFBundleName -string PremediaApp dist/PremediaApp.app/Contents/Info.plist
          plutil -replace CFBundleVersion -string 1.0.0 dist/PremediaApp.app/Contents/Info.plist

      - name: Sign the app bundle
        if: env.APPLE_TEAM_ID != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          codesign --force --deep --sign "Developer ID Application: ${{ secrets.APPLE_TEAM_ID }}" \
            --entitlements entitlements.plist dist/PremediaApp.app --timestamp --options runtime \
            || echo "Code signing failed, continuing for testing"

      - name: Create DMG
        run: |
          mkdir -p Output
          hdiutil create -srcfolder dist/PremediaApp.app -volname "PremediaApp" -fs HFS+ \
            -format UDZO Output/PremediaApp.dmg

      - name: Sign the DMG
        if: env.APPLE_TEAM_ID != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          codesign --force --sign "Developer ID Application: ${{ secrets.APPLE_TEAM_ID }}" \
            Output/PremediaApp.dmg --timestamp --options runtime \
            || echo "DMG signing failed, continuing for testing"

      - name: Notarize the DMG
        if: env.APPLE_TEAM_ID != ''
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          xcrun notarytool submit Output/PremediaApp.dmg \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APPLE_ID_PASSWORD }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --wait || echo "Notarization failed, continuing for testing"

      - name: Staple the notarization ticket
        if: env.APPLE_TEAM_ID != ''
        run: |
          xcrun stapler staple Output/PremediaApp.dmg || echo "Stapling failed, continuing for testing"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-macOS
          path: Output/PremediaApp.dmg
          retention-days: 5

  build-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        timeout-minutes: 20
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-dev python3-pip libgtk-3-dev
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Dependencies installed: $(pip list)"

      - name: Install PyInstaller
        run: |
          pip install pyinstaller==6.14.1

      - name: Run tests
        run: |
          python -m unittest discover -s tests -p "test_*.py" || echo "Tests failed, continuing to build..."

      - name: Build with PyInstaller
        timeout-minutes: 60
        run: |
          ls -R icons
          pyinstaller --noconfirm --onefile --windowed --icon=icons/premedia.png \
            --add-data "icons:icons" \
            --add-data "terms.txt:." \
            --add-data "license.txt:." \
            --hidden-import=paramiko \
            --hidden-import=tzdata \
            --exclude-module=tkinter \
            --exclude-module=numpy \
            --exclude-module=matplotlib \
            --name PremediaApp app.py --log-level DEBUG
          ls -R dist || echo "dist/ directory not found"

      - name: Create .deb package
        run: |
          mkdir -p dist/debian/usr/bin
          mkdir -p dist/debian/usr/share/applications
          mkdir -p dist/debian/usr/share/icons/hicolor/scalable/apps
          cp dist/PremediaApp dist/debian/usr/bin/ || echo "Executable not found"
          cp dist/icons/premedia.png dist/debian/usr/share/icons/hicolor/scalable/apps/premedia.png || echo "Icon file not found"
          cp dist/terms.txt dist/debian/usr/bin/ || echo "terms.txt not found"
          cp dist/license.txt dist/debian/usr/bin/ || echo "license.txt not found"
          cat > dist/debian/DEBIAN/control << EOF
          Package: premediaapp
          Version: 1.0.0
          Architecture: all
          Maintainer: VMG Premedia <support@vmgpremedia.com>
          Depends: python3, libgtk-3-0
          Description: PremediaApp for image retouching
          EOF
          cat > dist/debian/usr/share/applications/PremediaApp.desktop << EOF
          [Desktop Entry]
          Name=PremediaApp
          Exec=/usr/bin/PremediaApp
          Type=Application
          Icon=/usr/share/icons/hicolor/scalable/apps/premedia.png
          Terminal=false
          Categories=Utility;
          EOF
          dpkg-deb --build dist/debian Output/PremediaApp.deb || echo "dpkg-deb failed"

      - name: Update icon cache
        run: |
          gtk-update-icon-cache dist/debian/usr/share/icons/hicolor -f || echo "Icon cache update failed"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: PremediaApp-Ubuntu
          path: Output/PremediaApp.deb
          retention-days: 5