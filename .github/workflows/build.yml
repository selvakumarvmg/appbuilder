name: PremediaApp Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        echo "Installing Python dependencies..."
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          echo "Found requirements.txt, installing..."
          pip install -r requirements.txt || { echo "Failed to install requirements.txt"; exit 1; }
        else
          echo "requirements.txt not found, skipping..."
        fi
        echo "Installing pyinstaller..."
        pip install pyinstaller || { echo "Failed to install pyinstaller"; exit 1; }
      shell: bash

    - name: Install additional dependencies for Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Installing Ubuntu dependencies..."
        sudo apt-get update || { echo "apt-get update failed"; exit 1; }
        sudo apt-get install -y libegl1-mesa-dev libgl1-mesa-dri desktop-file-utils dpkg-dev || { echo "apt-get install failed"; exit 1; }
      shell: bash

    - name: Verify required files
      run: |
        echo "Verifying required files..."
        ls -l app.py || { echo "app.py not found"; exit 1; }
        ls -l requirements.txt || echo "requirements.txt not found (optional)"
        ls -l icons/premedia.png || echo "icons/premedia.png not found (optional)"
        ls -l icons/premedia.ico || echo "icons/premedia.ico not found (optional)"
        ls -l icons/premedia.icns || echo "icons/premedia.icns not found (optional)"
        ls -l terms.txt || { echo "terms.txt not found"; exit 1; }
        ls -l license.txt || { echo "license.txt not found"; exit 1; }
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          ls -l installer.iss || { echo "installer.iss not found"; exit 1; }
        fi
      shell: bash

    - name: Build executable
      run: |
        echo "Running PyInstaller..."
        pyinstaller --noconfirm --onefile \
          --add-data "icons${{ matrix.os == 'windows-latest' && ';' || ':' }}icons${{ matrix.os == 'windows-latest' && '' || matrix.os == 'macos-latest' && '' || ':.' }}" \
          --add-data "terms.txt${{ matrix.os == 'windows-latest' && ';' || ':' }}." \
          --add-data "license.txt${{ matrix.os == 'windows-latest' && ';' || ':' }}." \
          --icon icons/premedia.${{ matrix.os == 'windows-latest' && 'ico' || matrix.os == 'macos-latest' && 'icns' || 'png' }} \
          --name PremediaApp app.py || { echo "PyInstaller failed"; exit 1; }
        ls -l dist/PremediaApp* || { echo "PyInstaller output (dist/PremediaApp) not found"; exit 1; }
        if [ -d dist/icons ]; then
          ls -l dist/icons || echo "dist/icons directory exists but listing failed"
        else
          echo "dist/icons directory not found (optional)"
        fi
      shell: bash

    - name: Package macOS app bundle
      if: matrix.os == 'macos-latest'
      run: |
        echo "Packaging macOS app bundle..."
        mkdir -p dist/PremediaApp.app/Contents/MacOS
        mkdir -p dist/PremediaApp.app/Contents/Resources
        mv dist/PremediaApp dist/PremediaApp.app/Contents/MacOS/PremediaApp || { echo "Failed to move PremediaApp"; exit 1; }
        if [ -d dist/icons ]; then
          mv dist/icons dist/PremediaApp.app/Contents/Resources/icons || { echo "Failed to move icons"; exit 1; }
        else
          echo "dist/icons not found, skipping move"
        fi
        mv dist/terms.txt dist/PremediaApp.app/Contents/Resources/ || { echo "Failed to move terms.txt"; exit 1; }
        mv dist/license.txt dist/PremediaApp.app/Contents/Resources/ || { echo "Failed to move license.txt"; exit 1; }
        echo '<?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>CFBundleExecutable</key>
            <string>PremediaApp</string>
            <key>CFBundleIconFile</key>
            <string>premedia.icns</string>
            <key>CFBundleIdentifier</key>
            <string>com.xai.PremediaApp</string>
            <key>CFBundleName</key>
            <string>PremediaApp</string>
            <key>CFBundlePackageType</key>
            <string>APPL</string>
            <key>NSHighResolutionCapable</key>
            <true/>
        </dict>
        </plist>' > dist/PremediaApp.app/Contents/Info.plist
        hdiutil create -volname "PremediaApp" -srcfolder dist/PremediaApp.app -ov -format UDZO dist/PremediaApp.dmg || { echo "Failed to create DMG"; exit 1; }
        ls -l dist/PremediaApp.dmg || { echo "DMG file not found"; exit 1; }
      shell: bash

    - name: Package Windows installer
      if: matrix.os == 'windows-latest'
      run: |
        echo "Packaging Windows installer..."
        if [ -f installer.iss ]; then
          iscc installer.iss || { echo "Inno Setup failed"; exit 1; }
          ls -l Output/*.exe || { echo "No .exe files found in Output"; exit 1; }
        else
          echo "installer.iss not found, skipping Windows packaging"
          exit 1
        fi
      env:
        ISCC_PATH: "C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe"
      shell: bash

    - name: Package Ubuntu .deb
      if: matrix.os == 'ubuntu-latest'
      run: |
        echo "Packaging Ubuntu .deb..."
        mkdir -p deb-package/DEBIAN
        mkdir -p deb-package/opt/PremediaApp
        mkdir -p deb-package/usr/share/applications
        mkdir -p deb-package/usr/share/icons/hicolor/scalable/apps

        cp dist/PremediaApp deb-package/opt/PremediaApp/ || { echo "Failed to copy PremediaApp"; exit 1; }
        if [ -d dist/icons ]; then
          cp -r dist/icons deb-package/opt/PremediaApp/ || { echo "Failed to copy icons"; exit 1; }
        else
          echo "dist/icons not found, skipping copy"
        fi
        cp dist/terms.txt deb-package/opt/PremediaApp/ || { echo "Failed to copy terms.txt"; exit 1; }
        cp dist/license.txt deb-package/opt/PremediaApp/ || { echo "Failed to copy license.txt"; exit 1; }
        chmod -R 755 deb-package/opt/PremediaApp

        echo "Checking executable..."
        file deb-package/opt/PremediaApp/PremediaApp || { echo "Executable not found"; exit 1; }
        ldd deb-package/opt/PremediaApp/PremediaApp || echo "ldd check failed (non-fatal)"

        cat > deb-package/usr/share/applications/premediaapp.desktop << EOL
        [Desktop Entry]
        Name=PremediaApp
        Comment=Image Retouching Application
        Exec=/opt/PremediaApp/PremediaApp
        Type=Application
        Terminal=false
        Icon=premedia
        Categories=Utility;Graphics;
        EOL

        cat > deb-package/usr/share/applications/premediaapp-terms.desktop << EOL
        [Desktop Entry]
        Name=PremediaApp Terms
        Comment=View PremediaApp Terms of Service
        Exec=xdg-open /opt/PremediaApp/terms.txt
        Type=Application
        Terminal=false
        Icon=premedia
        Categories=Utility;
        EOL

        cat > deb-package/usr/share/applications/premediaapp-license.desktop << EOL
        [Desktop Entry]
        Name=PremediaApp License
        Comment=View PremediaApp License
        Exec=xdg-open /opt/PremediaApp/license.txt
        Type=Application
        Terminal=false
        Icon=premedia
        Categories=Utility;
        EOL

        if [ -f dist/icons/premedia.png ]; then
          cp dist/icons/premedia.png deb-package/usr/share/icons/hicolor/scalable/apps/premedia.png || { echo "Failed to copy icon"; exit 1; }
        else
          echo "dist/icons/premedia.png not found, skipping icon copy"
        fi

        cat > deb-package/DEBIAN/control << EOL
        Package: premediaapp
        Version: 1.0.0
        Architecture: all
        Maintainer: Your Name <your.email@example.com>
        Depends: python3 (>= 3.9), libegl1-mesa, libgl1-mesa-dri
        Section: utils
        Priority: optional
        Homepage: https://example.com
        Description: PremediaApp Image Retouching Application
         PremediaApp is a cross-platform application for image retouching.
        EOL

        cat > deb-package/DEBIAN/postinst << EOL
        #!/bin/sh
        set -e
        update-desktop-database
        gtk-update-icon-cache /usr/share/icons/hicolor || true
        EOL
        chmod 755 deb-package/DEBIAN/postinst

        dpkg-deb --build deb-package dist/premediaapp_1.0.0_all.deb || { echo "Failed to build .deb package"; exit 1; }
        ls -l dist/premediaapp_1.0.0_all.deb || { echo ".deb file not found"; exit 1; }
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: PremediaApp-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          dist/premediaapp_1.0.0_all.deb
          dist/*.dmg
          Output/*.exe
      continue-on-error: true

    - name: Run tests
      run: |
        echo "Running tests..."
        if [ -f dev-requirements.txt ]; then
          pip install -r dev-requirements.txt || { echo "Failed to install dev-requirements.txt"; exit 1; }
          pytest --cov=./ --cov-report=xml || { echo "Tests failed"; exit 1; }
        else
          echo "dev-requirements.txt not found, skipping tests"
        fi
      shell: bash